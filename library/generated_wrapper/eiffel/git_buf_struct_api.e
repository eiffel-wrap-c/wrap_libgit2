note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class GIT_BUF_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	ptr:  detachable STRING
			-- Access member `ptr`
		require
			exists: exists
		do
			if attached c_ptr (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_ptr (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_ptr (a_value: STRING) 
			-- Change the value of member `ptr` to `a_value`.
		require
			exists: exists
		do
			set_c_ptr (item, (create {C_STRING}.make (a_value)).item )
		end

	asize: INTEGER
			-- Access member `asize`
		require
			exists: exists
		do
			Result := c_asize (item)
		ensure
			result_correct: Result = c_asize (item)
		end

	set_asize (a_value: INTEGER) 
			-- Change the value of member `asize` to `a_value`.
		require
			exists: exists
		do
			set_c_asize (item, a_value)
		ensure
			asize_set: a_value = asize
		end

	size: INTEGER
			-- Access member `size`
		require
			exists: exists
		do
			Result := c_size (item)
		ensure
			result_correct: Result = c_size (item)
		end

	set_size (a_value: INTEGER) 
			-- Change the value of member `size` to `a_value`.
		require
			exists: exists
		do
			set_c_size (item, a_value)
		ensure
			size_set: a_value = size
		end

feature {NONE} -- Implementation wrapper for struct git_buf

	sizeof_external: INTEGER 
		external
			"C inline use <git2.h>"
		alias
			"sizeof(git_buf)"
		end

	c_ptr (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_buf*)$an_item)->ptr
			]"
		end

	set_c_ptr (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_buf*)$an_item)->ptr =  (char*)$a_value
			]"
		ensure
			ptr_set: a_value = c_ptr (an_item)
		end

	c_asize (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_buf*)$an_item)->asize
			]"
		end

	set_c_asize (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_buf*)$an_item)->asize =  (size_t)$a_value
			]"
		ensure
			asize_set: a_value = c_asize (an_item)
		end

	c_size (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_buf*)$an_item)->size
			]"
		end

	set_c_size (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_buf*)$an_item)->size =  (size_t)$a_value
			]"
		ensure
			size_set: a_value = c_size (an_item)
		end

end
