note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class GIT_CHECKOUT_OPTIONS_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	version: INTEGER
			-- Access member `version`
		require
			exists: exists
		do
			Result := c_version (item)
		ensure
			result_correct: Result = c_version (item)
		end

	set_version (a_value: INTEGER) 
			-- Change the value of member `version` to `a_value`.
		require
			exists: exists
		do
			set_c_version (item, a_value)
		ensure
			version_set: a_value = version
		end

	checkout_strategy: INTEGER
			-- Access member `checkout_strategy`
		require
			exists: exists
		do
			Result := c_checkout_strategy (item)
		ensure
			result_correct: Result = c_checkout_strategy (item)
		end

	set_checkout_strategy (a_value: INTEGER) 
			-- Change the value of member `checkout_strategy` to `a_value`.
		require
			exists: exists
		do
			set_c_checkout_strategy (item, a_value)
		ensure
			checkout_strategy_set: a_value = checkout_strategy
		end

	disable_filters: INTEGER
			-- Access member `disable_filters`
		require
			exists: exists
		do
			Result := c_disable_filters (item)
		ensure
			result_correct: Result = c_disable_filters (item)
		end

	set_disable_filters (a_value: INTEGER) 
			-- Change the value of member `disable_filters` to `a_value`.
		require
			exists: exists
		do
			set_c_disable_filters (item, a_value)
		ensure
			disable_filters_set: a_value = disable_filters
		end

	dir_mode: INTEGER
			-- Access member `dir_mode`
		require
			exists: exists
		do
			Result := c_dir_mode (item)
		ensure
			result_correct: Result = c_dir_mode (item)
		end

	set_dir_mode (a_value: INTEGER) 
			-- Change the value of member `dir_mode` to `a_value`.
		require
			exists: exists
		do
			set_c_dir_mode (item, a_value)
		ensure
			dir_mode_set: a_value = dir_mode
		end

	file_mode: INTEGER
			-- Access member `file_mode`
		require
			exists: exists
		do
			Result := c_file_mode (item)
		ensure
			result_correct: Result = c_file_mode (item)
		end

	set_file_mode (a_value: INTEGER) 
			-- Change the value of member `file_mode` to `a_value`.
		require
			exists: exists
		do
			set_c_file_mode (item, a_value)
		ensure
			file_mode_set: a_value = file_mode
		end

	file_open_flags: INTEGER
			-- Access member `file_open_flags`
		require
			exists: exists
		do
			Result := c_file_open_flags (item)
		ensure
			result_correct: Result = c_file_open_flags (item)
		end

	set_file_open_flags (a_value: INTEGER) 
			-- Change the value of member `file_open_flags` to `a_value`.
		require
			exists: exists
		do
			set_c_file_open_flags (item, a_value)
		ensure
			file_open_flags_set: a_value = file_open_flags
		end

	notify_flags: INTEGER
			-- Access member `notify_flags`
		require
			exists: exists
		do
			Result := c_notify_flags (item)
		ensure
			result_correct: Result = c_notify_flags (item)
		end

	set_notify_flags (a_value: INTEGER) 
			-- Change the value of member `notify_flags` to `a_value`.
		require
			exists: exists
		do
			set_c_notify_flags (item, a_value)
		ensure
			notify_flags_set: a_value = notify_flags
		end

	notify_cb: POINTER
			-- Access member `notify_cb`
		require
			exists: exists
		do
			Result := c_notify_cb (item)
		ensure
			result_correct: Result = c_notify_cb (item)
		end

	set_notify_cb (a_value: POINTER) 
			-- Change the value of member `notify_cb` to `a_value`.
		require
			exists: exists
		do
			set_c_notify_cb (item, a_value)
		ensure
			notify_cb_set: a_value = notify_cb
		end

	notify_payload: POINTER
			-- Access member `notify_payload`
		require
			exists: exists
		do
			Result := c_notify_payload (item)
		ensure
			result_correct: Result = c_notify_payload (item)
		end

	set_notify_payload (a_value: POINTER) 
			-- Change the value of member `notify_payload` to `a_value`.
		require
			exists: exists
		do
			set_c_notify_payload (item, a_value)
		ensure
			notify_payload_set: a_value = notify_payload
		end

	progress_cb: POINTER
			-- Access member `progress_cb`
		require
			exists: exists
		do
			Result := c_progress_cb (item)
		ensure
			result_correct: Result = c_progress_cb (item)
		end

	set_progress_cb (a_value: POINTER) 
			-- Change the value of member `progress_cb` to `a_value`.
		require
			exists: exists
		do
			set_c_progress_cb (item, a_value)
		ensure
			progress_cb_set: a_value = progress_cb
		end

	progress_payload: POINTER
			-- Access member `progress_payload`
		require
			exists: exists
		do
			Result := c_progress_payload (item)
		ensure
			result_correct: Result = c_progress_payload (item)
		end

	set_progress_payload (a_value: POINTER) 
			-- Change the value of member `progress_payload` to `a_value`.
		require
			exists: exists
		do
			set_c_progress_payload (item, a_value)
		ensure
			progress_payload_set: a_value = progress_payload
		end

	paths: detachable GIT_STRARRAY_STRUCT_API
			-- Access member `paths`
		require
			exists: exists
		do
			if attached c_paths (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_paths (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_paths (item) 
		end

	set_paths (a_value: GIT_STRARRAY_STRUCT_API) 
			-- Set member `paths`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_paths (item, a_value.item)
		ensure
			paths_set: attached paths as l_value implies l_value.item = a_value.item
		end

	baseline: detachable GIT_TREE_STRUCT_API 
			-- Access member `baseline`
		require
			exists: exists
		do
			if attached c_baseline (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_baseline (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_baseline (item) 
		end

	set_baseline (a_value: GIT_TREE_STRUCT_API) 
			-- Set member `baseline`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_baseline (item, a_value.item)
		ensure
			baseline_set: attached baseline as l_value implies l_value.item = a_value.item
		end

	baseline_index: detachable GIT_INDEX_STRUCT_API 
			-- Access member `baseline_index`
		require
			exists: exists
		do
			if attached c_baseline_index (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_baseline_index (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_baseline_index (item) 
		end

	set_baseline_index (a_value: GIT_INDEX_STRUCT_API) 
			-- Set member `baseline_index`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_baseline_index (item, a_value.item)
		ensure
			baseline_index_set: attached baseline_index as l_value implies l_value.item = a_value.item
		end

	target_directory:  detachable STRING
			-- Access member `target_directory`
		require
			exists: exists
		do
			if attached c_target_directory (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_target_directory (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_target_directory (a_value: STRING) 
			-- Change the value of member `target_directory` to `a_value`.
		require
			exists: exists
		do
			set_c_target_directory (item, (create {C_STRING}.make (a_value)).item )
		end

	ancestor_label:  detachable STRING
			-- Access member `ancestor_label`
		require
			exists: exists
		do
			if attached c_ancestor_label (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_ancestor_label (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_ancestor_label (a_value: STRING) 
			-- Change the value of member `ancestor_label` to `a_value`.
		require
			exists: exists
		do
			set_c_ancestor_label (item, (create {C_STRING}.make (a_value)).item )
		end

	our_label:  detachable STRING
			-- Access member `our_label`
		require
			exists: exists
		do
			if attached c_our_label (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_our_label (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_our_label (a_value: STRING) 
			-- Change the value of member `our_label` to `a_value`.
		require
			exists: exists
		do
			set_c_our_label (item, (create {C_STRING}.make (a_value)).item )
		end

	their_label:  detachable STRING
			-- Access member `their_label`
		require
			exists: exists
		do
			if attached c_their_label (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_their_label (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_their_label (a_value: STRING) 
			-- Change the value of member `their_label` to `a_value`.
		require
			exists: exists
		do
			set_c_their_label (item, (create {C_STRING}.make (a_value)).item )
		end

	perfdata_cb: POINTER
			-- Access member `perfdata_cb`
		require
			exists: exists
		do
			Result := c_perfdata_cb (item)
		ensure
			result_correct: Result = c_perfdata_cb (item)
		end

	set_perfdata_cb (a_value: POINTER) 
			-- Change the value of member `perfdata_cb` to `a_value`.
		require
			exists: exists
		do
			set_c_perfdata_cb (item, a_value)
		ensure
			perfdata_cb_set: a_value = perfdata_cb
		end

	perfdata_payload: POINTER
			-- Access member `perfdata_payload`
		require
			exists: exists
		do
			Result := c_perfdata_payload (item)
		ensure
			result_correct: Result = c_perfdata_payload (item)
		end

	set_perfdata_payload (a_value: POINTER) 
			-- Change the value of member `perfdata_payload` to `a_value`.
		require
			exists: exists
		do
			set_c_perfdata_payload (item, a_value)
		ensure
			perfdata_payload_set: a_value = perfdata_payload
		end

feature {NONE} -- Implementation wrapper for struct struct git_checkout_options

	sizeof_external: INTEGER 
		external
			"C inline use <git2.h>"
		alias
			"sizeof(struct git_checkout_options)"
		end

	c_version (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->version
			]"
		end

	set_c_version (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->version =  (unsigned int)$a_value
			]"
		ensure
			version_set: a_value = c_version (an_item)
		end

	c_checkout_strategy (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->checkout_strategy
			]"
		end

	set_c_checkout_strategy (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->checkout_strategy =  (unsigned int)$a_value
			]"
		ensure
			checkout_strategy_set: a_value = c_checkout_strategy (an_item)
		end

	c_disable_filters (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->disable_filters
			]"
		end

	set_c_disable_filters (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->disable_filters =  (int)$a_value
			]"
		ensure
			disable_filters_set: a_value = c_disable_filters (an_item)
		end

	c_dir_mode (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->dir_mode
			]"
		end

	set_c_dir_mode (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->dir_mode =  (unsigned int)$a_value
			]"
		ensure
			dir_mode_set: a_value = c_dir_mode (an_item)
		end

	c_file_mode (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->file_mode
			]"
		end

	set_c_file_mode (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->file_mode =  (unsigned int)$a_value
			]"
		ensure
			file_mode_set: a_value = c_file_mode (an_item)
		end

	c_file_open_flags (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->file_open_flags
			]"
		end

	set_c_file_open_flags (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->file_open_flags =  (int)$a_value
			]"
		ensure
			file_open_flags_set: a_value = c_file_open_flags (an_item)
		end

	c_notify_flags (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->notify_flags
			]"
		end

	set_c_notify_flags (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->notify_flags =  (unsigned int)$a_value
			]"
		ensure
			notify_flags_set: a_value = c_notify_flags (an_item)
		end

	c_notify_cb (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->notify_cb
			]"
		end

	set_c_notify_cb (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->notify_cb =  (git_checkout_notify_cb)$a_value
			]"
		ensure
			notify_cb_set: a_value = c_notify_cb (an_item)
		end

	c_notify_payload (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->notify_payload
			]"
		end

	set_c_notify_payload (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->notify_payload =  (void*)$a_value
			]"
		ensure
			notify_payload_set: a_value = c_notify_payload (an_item)
		end

	c_progress_cb (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->progress_cb
			]"
		end

	set_c_progress_cb (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->progress_cb =  (git_checkout_progress_cb)$a_value
			]"
		ensure
			progress_cb_set: a_value = c_progress_cb (an_item)
		end

	c_progress_payload (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->progress_payload
			]"
		end

	set_c_progress_payload (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->progress_payload =  (void*)$a_value
			]"
		ensure
			progress_payload_set: a_value = c_progress_payload (an_item)
		end

	c_paths (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				&((struct git_checkout_options*)$an_item)->paths
			]"
		end

	set_c_paths (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->paths =  *(git_strarray*)$a_value
			]"
		end

	c_baseline (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->baseline
			]"
		end

	set_c_baseline (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->baseline =  (git_tree*)$a_value
			]"
		ensure
			baseline_set: a_value = c_baseline (an_item)
		end

	c_baseline_index (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->baseline_index
			]"
		end

	set_c_baseline_index (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->baseline_index =  (git_index*)$a_value
			]"
		ensure
			baseline_index_set: a_value = c_baseline_index (an_item)
		end

	c_target_directory (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->target_directory
			]"
		end

	set_c_target_directory (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->target_directory =  (char const*)$a_value
			]"
		ensure
			target_directory_set: a_value = c_target_directory (an_item)
		end

	c_ancestor_label (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->ancestor_label
			]"
		end

	set_c_ancestor_label (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->ancestor_label =  (char const*)$a_value
			]"
		ensure
			ancestor_label_set: a_value = c_ancestor_label (an_item)
		end

	c_our_label (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->our_label
			]"
		end

	set_c_our_label (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->our_label =  (char const*)$a_value
			]"
		ensure
			our_label_set: a_value = c_our_label (an_item)
		end

	c_their_label (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->their_label
			]"
		end

	set_c_their_label (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->their_label =  (char const*)$a_value
			]"
		ensure
			their_label_set: a_value = c_their_label (an_item)
		end

	c_perfdata_cb (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->perfdata_cb
			]"
		end

	set_c_perfdata_cb (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->perfdata_cb =  (git_checkout_perfdata_cb)$a_value
			]"
		ensure
			perfdata_cb_set: a_value = c_perfdata_cb (an_item)
		end

	c_perfdata_payload (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->perfdata_payload
			]"
		end

	set_c_perfdata_payload (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_checkout_options*)$an_item)->perfdata_payload =  (void*)$a_value
			]"
		ensure
			perfdata_payload_set: a_value = c_perfdata_payload (an_item)
		end

end
