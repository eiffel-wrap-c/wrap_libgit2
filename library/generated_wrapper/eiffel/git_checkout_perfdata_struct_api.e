note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class GIT_CHECKOUT_PERFDATA_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	mkdir_calls: INTEGER
			-- Access member `mkdir_calls`
		require
			exists: exists
		do
			Result := c_mkdir_calls (item)
		ensure
			result_correct: Result = c_mkdir_calls (item)
		end

	set_mkdir_calls (a_value: INTEGER) 
			-- Change the value of member `mkdir_calls` to `a_value`.
		require
			exists: exists
		do
			set_c_mkdir_calls (item, a_value)
		ensure
			mkdir_calls_set: a_value = mkdir_calls
		end

	stat_calls: INTEGER
			-- Access member `stat_calls`
		require
			exists: exists
		do
			Result := c_stat_calls (item)
		ensure
			result_correct: Result = c_stat_calls (item)
		end

	set_stat_calls (a_value: INTEGER) 
			-- Change the value of member `stat_calls` to `a_value`.
		require
			exists: exists
		do
			set_c_stat_calls (item, a_value)
		ensure
			stat_calls_set: a_value = stat_calls
		end

	chmod_calls: INTEGER
			-- Access member `chmod_calls`
		require
			exists: exists
		do
			Result := c_chmod_calls (item)
		ensure
			result_correct: Result = c_chmod_calls (item)
		end

	set_chmod_calls (a_value: INTEGER) 
			-- Change the value of member `chmod_calls` to `a_value`.
		require
			exists: exists
		do
			set_c_chmod_calls (item, a_value)
		ensure
			chmod_calls_set: a_value = chmod_calls
		end

feature {NONE} -- Implementation wrapper for struct git_checkout_perfdata

	sizeof_external: INTEGER 
		external
			"C inline use <git2.h>"
		alias
			"sizeof(git_checkout_perfdata)"
		end

	c_mkdir_calls (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_checkout_perfdata*)$an_item)->mkdir_calls
			]"
		end

	set_c_mkdir_calls (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_checkout_perfdata*)$an_item)->mkdir_calls =  (size_t)$a_value
			]"
		ensure
			mkdir_calls_set: a_value = c_mkdir_calls (an_item)
		end

	c_stat_calls (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_checkout_perfdata*)$an_item)->stat_calls
			]"
		end

	set_c_stat_calls (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_checkout_perfdata*)$an_item)->stat_calls =  (size_t)$a_value
			]"
		ensure
			stat_calls_set: a_value = c_stat_calls (an_item)
		end

	c_chmod_calls (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_checkout_perfdata*)$an_item)->chmod_calls
			]"
		end

	set_c_chmod_calls (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_checkout_perfdata*)$an_item)->chmod_calls =  (size_t)$a_value
			]"
		ensure
			chmod_calls_set: a_value = c_chmod_calls (an_item)
		end

end
