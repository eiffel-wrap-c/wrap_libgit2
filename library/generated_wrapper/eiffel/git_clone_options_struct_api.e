note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class GIT_CLONE_OPTIONS_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	version: INTEGER
			-- Access member `version`
		require
			exists: exists
		do
			Result := c_version (item)
		ensure
			result_correct: Result = c_version (item)
		end

	set_version (a_value: INTEGER) 
			-- Change the value of member `version` to `a_value`.
		require
			exists: exists
		do
			set_c_version (item, a_value)
		ensure
			version_set: a_value = version
		end

	checkout_opts: GIT_CHECKOUT_OPTIONS_STRUCT_API
			-- Access member `checkout_opts`
		require
			exists: exists
		do
			create Result.make_by_pointer ( c_checkout_opts(item) )
		ensure
			result_not_void: Result.item = c_checkout_opts (item) 
		end

	set_checkout_opts (a_value: GIT_CHECKOUT_OPTIONS_STRUCT_API) 
			-- Set member `checkout_opts`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_checkout_opts (item, a_value.item)
		ensure
			checkout_opts_set: checkout_opts.item = a_value.item
		end

	fetch_opts: GIT_FETCH_OPTIONS_STRUCT_API
			-- Access member `fetch_opts`
		require
			exists: exists
		do
			create Result.make_by_pointer ( c_fetch_opts(item) )
		ensure
			result_not_void: Result.item = c_fetch_opts (item) 
		end

	set_fetch_opts (a_value: GIT_FETCH_OPTIONS_STRUCT_API) 
			-- Set member `fetch_opts`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_fetch_opts (item, a_value.item)
		ensure
			fetch_opts_set: fetch_opts.item = a_value.item
		end

	bare: INTEGER
			-- Access member `bare`
		require
			exists: exists
		do
			Result := c_bare (item)
		ensure
			result_correct: Result = c_bare (item)
		end

	set_bare (a_value: INTEGER) 
			-- Change the value of member `bare` to `a_value`.
		require
			exists: exists
		do
			set_c_bare (item, a_value)
		ensure
			bare_set: a_value = bare
		end

	a_local: INTEGER
			-- Access member `local`
		require
			exists: exists
		do
			Result := c_a_local (item)
		ensure
			result_correct: Result = c_a_local (item)
		end

	set_a_local (a_value: INTEGER) 
			-- Change the value of member `local` to `a_value`.
		require
			exists: exists
		do
			set_c_a_local (item, a_value)
		ensure
			a_local_set: a_value = a_local
		end

	checkout_branch:  detachable STRING
			-- Access member `checkout_branch`
		require
			exists: exists
		do
			if attached c_checkout_branch (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_checkout_branch (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_checkout_branch (a_value: STRING) 
			-- Change the value of member `checkout_branch` to `a_value`.
		require
			exists: exists
		do
			set_c_checkout_branch (item, (create {C_STRING}.make (a_value)).item )
		end

	repository_cb: POINTER
			-- Access member `repository_cb`
		require
			exists: exists
		do
			Result := c_repository_cb (item)
		ensure
			result_correct: Result = c_repository_cb (item)
		end

	set_repository_cb (a_value: POINTER) 
			-- Change the value of member `repository_cb` to `a_value`.
		require
			exists: exists
		do
			set_c_repository_cb (item, a_value)
		ensure
			repository_cb_set: a_value = repository_cb
		end

	repository_cb_payload: POINTER
			-- Access member `repository_cb_payload`
		require
			exists: exists
		do
			Result := c_repository_cb_payload (item)
		ensure
			result_correct: Result = c_repository_cb_payload (item)
		end

	set_repository_cb_payload (a_value: POINTER) 
			-- Change the value of member `repository_cb_payload` to `a_value`.
		require
			exists: exists
		do
			set_c_repository_cb_payload (item, a_value)
		ensure
			repository_cb_payload_set: a_value = repository_cb_payload
		end

	remote_cb: POINTER
			-- Access member `remote_cb`
		require
			exists: exists
		do
			Result := c_remote_cb (item)
		ensure
			result_correct: Result = c_remote_cb (item)
		end

	set_remote_cb (a_value: POINTER) 
			-- Change the value of member `remote_cb` to `a_value`.
		require
			exists: exists
		do
			set_c_remote_cb (item, a_value)
		ensure
			remote_cb_set: a_value = remote_cb
		end

	remote_cb_payload: POINTER
			-- Access member `remote_cb_payload`
		require
			exists: exists
		do
			Result := c_remote_cb_payload (item)
		ensure
			result_correct: Result = c_remote_cb_payload (item)
		end

	set_remote_cb_payload (a_value: POINTER) 
			-- Change the value of member `remote_cb_payload` to `a_value`.
		require
			exists: exists
		do
			set_c_remote_cb_payload (item, a_value)
		ensure
			remote_cb_payload_set: a_value = remote_cb_payload
		end

feature {NONE} -- Implementation wrapper for struct struct git_clone_options

	sizeof_external: INTEGER 
		external
			"C inline use <git2.h>"
		alias
			"sizeof(struct git_clone_options)"
		end

	c_version (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_clone_options*)$an_item)->version
			]"
		end

	set_c_version (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_clone_options*)$an_item)->version =  (unsigned int)$a_value
			]"
		ensure
			version_set: a_value = c_version (an_item)
		end

	c_checkout_opts (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				&((struct git_clone_options*)$an_item)->checkout_opts
			]"
		end

	set_c_checkout_opts (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_clone_options*)$an_item)->checkout_opts =  *(git_checkout_options*)$a_value
			]"
		end

	c_fetch_opts (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				&((struct git_clone_options*)$an_item)->fetch_opts
			]"
		end

	set_c_fetch_opts (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_clone_options*)$an_item)->fetch_opts =  *(git_fetch_options*)$a_value
			]"
		end

	c_bare (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_clone_options*)$an_item)->bare
			]"
		end

	set_c_bare (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_clone_options*)$an_item)->bare =  (int)$a_value
			]"
		ensure
			bare_set: a_value = c_bare (an_item)
		end

	c_a_local (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_clone_options*)$an_item)->local
			]"
		end

	set_c_a_local (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_clone_options*)$an_item)->local =  (git_clone_local_t)$a_value
			]"
		ensure
			a_local_set: a_value = c_a_local (an_item)
		end

	c_checkout_branch (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_clone_options*)$an_item)->checkout_branch
			]"
		end

	set_c_checkout_branch (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_clone_options*)$an_item)->checkout_branch =  (char const*)$a_value
			]"
		ensure
			checkout_branch_set: a_value = c_checkout_branch (an_item)
		end

	c_repository_cb (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_clone_options*)$an_item)->repository_cb
			]"
		end

	set_c_repository_cb (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_clone_options*)$an_item)->repository_cb =  (git_repository_create_cb)$a_value
			]"
		ensure
			repository_cb_set: a_value = c_repository_cb (an_item)
		end

	c_repository_cb_payload (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_clone_options*)$an_item)->repository_cb_payload
			]"
		end

	set_c_repository_cb_payload (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_clone_options*)$an_item)->repository_cb_payload =  (void*)$a_value
			]"
		ensure
			repository_cb_payload_set: a_value = c_repository_cb_payload (an_item)
		end

	c_remote_cb (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_clone_options*)$an_item)->remote_cb
			]"
		end

	set_c_remote_cb (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_clone_options*)$an_item)->remote_cb =  (git_remote_create_cb)$a_value
			]"
		ensure
			remote_cb_set: a_value = c_remote_cb (an_item)
		end

	c_remote_cb_payload (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_clone_options*)$an_item)->remote_cb_payload
			]"
		end

	set_c_remote_cb_payload (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_clone_options*)$an_item)->remote_cb_payload =  (void*)$a_value
			]"
		ensure
			remote_cb_payload_set: a_value = c_remote_cb_payload (an_item)
		end

end
