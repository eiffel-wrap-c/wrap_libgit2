note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class GIT_CRED_SSH_KEY_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	parent: detachable GIT_CRED_STRUCT_API
			-- Access member `parent`
		require
			exists: exists
		do
			if attached c_parent (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_parent (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_parent (item) 
		end

	set_parent (a_value: GIT_CRED_STRUCT_API) 
			-- Set member `parent`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_parent (item, a_value.item)
		ensure
			parent_set: attached parent as l_value implies l_value.item = a_value.item
		end

	username:  detachable STRING
			-- Access member `username`
		require
			exists: exists
		do
			if attached c_username (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_username (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_username (a_value: STRING) 
			-- Change the value of member `username` to `a_value`.
		require
			exists: exists
		do
			set_c_username (item, (create {C_STRING}.make (a_value)).item )
		end

	publickey:  detachable STRING
			-- Access member `publickey`
		require
			exists: exists
		do
			if attached c_publickey (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_publickey (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_publickey (a_value: STRING) 
			-- Change the value of member `publickey` to `a_value`.
		require
			exists: exists
		do
			set_c_publickey (item, (create {C_STRING}.make (a_value)).item )
		end

	privatekey:  detachable STRING
			-- Access member `privatekey`
		require
			exists: exists
		do
			if attached c_privatekey (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_privatekey (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_privatekey (a_value: STRING) 
			-- Change the value of member `privatekey` to `a_value`.
		require
			exists: exists
		do
			set_c_privatekey (item, (create {C_STRING}.make (a_value)).item )
		end

	passphrase:  detachable STRING
			-- Access member `passphrase`
		require
			exists: exists
		do
			if attached c_passphrase (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_passphrase (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_passphrase (a_value: STRING) 
			-- Change the value of member `passphrase` to `a_value`.
		require
			exists: exists
		do
			set_c_passphrase (item, (create {C_STRING}.make (a_value)).item )
		end

feature {NONE} -- Implementation wrapper for struct struct git_cred_ssh_key

	sizeof_external: INTEGER 
		external
			"C inline use <git2.h>"
		alias
			"sizeof(struct git_cred_ssh_key)"
		end

	c_parent (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				&((struct git_cred_ssh_key*)$an_item)->parent
			]"
		end

	set_c_parent (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_cred_ssh_key*)$an_item)->parent =  *(git_cred*)$a_value
			]"
		end

	c_username (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_cred_ssh_key*)$an_item)->username
			]"
		end

	set_c_username (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_cred_ssh_key*)$an_item)->username =  (char*)$a_value
			]"
		ensure
			username_set: a_value = c_username (an_item)
		end

	c_publickey (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_cred_ssh_key*)$an_item)->publickey
			]"
		end

	set_c_publickey (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_cred_ssh_key*)$an_item)->publickey =  (char*)$a_value
			]"
		ensure
			publickey_set: a_value = c_publickey (an_item)
		end

	c_privatekey (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_cred_ssh_key*)$an_item)->privatekey
			]"
		end

	set_c_privatekey (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_cred_ssh_key*)$an_item)->privatekey =  (char*)$a_value
			]"
		ensure
			privatekey_set: a_value = c_privatekey (an_item)
		end

	c_passphrase (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_cred_ssh_key*)$an_item)->passphrase
			]"
		end

	set_c_passphrase (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_cred_ssh_key*)$an_item)->passphrase =  (char*)$a_value
			]"
		ensure
			passphrase_set: a_value = c_passphrase (an_item)
		end

end
