note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class GIT_DESCRIBE_FORMAT_OPTIONS_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	version: INTEGER
			-- Access member `version`
		require
			exists: exists
		do
			Result := c_version (item)
		ensure
			result_correct: Result = c_version (item)
		end

	set_version (a_value: INTEGER) 
			-- Change the value of member `version` to `a_value`.
		require
			exists: exists
		do
			set_c_version (item, a_value)
		ensure
			version_set: a_value = version
		end

	abbreviated_size: INTEGER
			-- Access member `abbreviated_size`
		require
			exists: exists
		do
			Result := c_abbreviated_size (item)
		ensure
			result_correct: Result = c_abbreviated_size (item)
		end

	set_abbreviated_size (a_value: INTEGER) 
			-- Change the value of member `abbreviated_size` to `a_value`.
		require
			exists: exists
		do
			set_c_abbreviated_size (item, a_value)
		ensure
			abbreviated_size_set: a_value = abbreviated_size
		end

	always_use_long_format: INTEGER
			-- Access member `always_use_long_format`
		require
			exists: exists
		do
			Result := c_always_use_long_format (item)
		ensure
			result_correct: Result = c_always_use_long_format (item)
		end

	set_always_use_long_format (a_value: INTEGER) 
			-- Change the value of member `always_use_long_format` to `a_value`.
		require
			exists: exists
		do
			set_c_always_use_long_format (item, a_value)
		ensure
			always_use_long_format_set: a_value = always_use_long_format
		end

	dirty_suffix:  detachable C_STRING
			-- Access member `dirty_suffix`
		require
			exists: exists
		do
			if attached c_dirty_suffix (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_dirty_suffix (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_dirty_suffix (a_value: C_STRING) 
			-- Change the value of member `dirty_suffix` to `a_value`.
		require
			exists: exists
		do
			set_c_dirty_suffix (item, a_value.item )
		end

feature {NONE} -- Implementation wrapper for struct git_describe_format_options

	sizeof_external: INTEGER 
		external
			"C inline use <git2.h>"
		alias
			"sizeof(git_describe_format_options)"
		end

	c_version (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_describe_format_options*)$an_item)->version
			]"
		end

	set_c_version (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_describe_format_options*)$an_item)->version =  (unsigned int)$a_value
			]"
		ensure
			version_set: a_value = c_version (an_item)
		end

	c_abbreviated_size (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_describe_format_options*)$an_item)->abbreviated_size
			]"
		end

	set_c_abbreviated_size (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_describe_format_options*)$an_item)->abbreviated_size =  (unsigned int)$a_value
			]"
		ensure
			abbreviated_size_set: a_value = c_abbreviated_size (an_item)
		end

	c_always_use_long_format (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_describe_format_options*)$an_item)->always_use_long_format
			]"
		end

	set_c_always_use_long_format (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_describe_format_options*)$an_item)->always_use_long_format =  (int)$a_value
			]"
		ensure
			always_use_long_format_set: a_value = c_always_use_long_format (an_item)
		end

	c_dirty_suffix (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_describe_format_options*)$an_item)->dirty_suffix
			]"
		end

	set_c_dirty_suffix (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_describe_format_options*)$an_item)->dirty_suffix =  (char const*)$a_value
			]"
		ensure
			dirty_suffix_set: a_value = c_dirty_suffix (an_item)
		end

end
