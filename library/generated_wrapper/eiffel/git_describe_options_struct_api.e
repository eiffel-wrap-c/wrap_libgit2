note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class GIT_DESCRIBE_OPTIONS_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	version: INTEGER
			-- Access member `version`
		require
			exists: exists
		do
			Result := c_version (item)
		ensure
			result_correct: Result = c_version (item)
		end

	set_version (a_value: INTEGER) 
			-- Change the value of member `version` to `a_value`.
		require
			exists: exists
		do
			set_c_version (item, a_value)
		ensure
			version_set: a_value = version
		end

	max_candidates_tags: INTEGER
			-- Access member `max_candidates_tags`
		require
			exists: exists
		do
			Result := c_max_candidates_tags (item)
		ensure
			result_correct: Result = c_max_candidates_tags (item)
		end

	set_max_candidates_tags (a_value: INTEGER) 
			-- Change the value of member `max_candidates_tags` to `a_value`.
		require
			exists: exists
		do
			set_c_max_candidates_tags (item, a_value)
		ensure
			max_candidates_tags_set: a_value = max_candidates_tags
		end

	describe_strategy: INTEGER
			-- Access member `describe_strategy`
		require
			exists: exists
		do
			Result := c_describe_strategy (item)
		ensure
			result_correct: Result = c_describe_strategy (item)
		end

	set_describe_strategy (a_value: INTEGER) 
			-- Change the value of member `describe_strategy` to `a_value`.
		require
			exists: exists
		do
			set_c_describe_strategy (item, a_value)
		ensure
			describe_strategy_set: a_value = describe_strategy
		end

	pattern:  detachable C_STRING
			-- Access member `pattern`
		require
			exists: exists
		do
			if attached c_pattern (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_pattern (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_pattern (a_value: C_STRING) 
			-- Change the value of member `pattern` to `a_value`.
		require
			exists: exists
		do
			set_c_pattern (item, a_value.item )
		end

	only_follow_first_parent: INTEGER
			-- Access member `only_follow_first_parent`
		require
			exists: exists
		do
			Result := c_only_follow_first_parent (item)
		ensure
			result_correct: Result = c_only_follow_first_parent (item)
		end

	set_only_follow_first_parent (a_value: INTEGER) 
			-- Change the value of member `only_follow_first_parent` to `a_value`.
		require
			exists: exists
		do
			set_c_only_follow_first_parent (item, a_value)
		ensure
			only_follow_first_parent_set: a_value = only_follow_first_parent
		end

	show_commit_oid_as_fallback: INTEGER
			-- Access member `show_commit_oid_as_fallback`
		require
			exists: exists
		do
			Result := c_show_commit_oid_as_fallback (item)
		ensure
			result_correct: Result = c_show_commit_oid_as_fallback (item)
		end

	set_show_commit_oid_as_fallback (a_value: INTEGER) 
			-- Change the value of member `show_commit_oid_as_fallback` to `a_value`.
		require
			exists: exists
		do
			set_c_show_commit_oid_as_fallback (item, a_value)
		ensure
			show_commit_oid_as_fallback_set: a_value = show_commit_oid_as_fallback
		end

feature {NONE} -- Implementation wrapper for struct struct git_describe_options

	sizeof_external: INTEGER 
		external
			"C inline use <git2.h>"
		alias
			"sizeof(struct git_describe_options)"
		end

	c_version (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_describe_options*)$an_item)->version
			]"
		end

	set_c_version (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_describe_options*)$an_item)->version =  (unsigned int)$a_value
			]"
		ensure
			version_set: a_value = c_version (an_item)
		end

	c_max_candidates_tags (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_describe_options*)$an_item)->max_candidates_tags
			]"
		end

	set_c_max_candidates_tags (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_describe_options*)$an_item)->max_candidates_tags =  (unsigned int)$a_value
			]"
		ensure
			max_candidates_tags_set: a_value = c_max_candidates_tags (an_item)
		end

	c_describe_strategy (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_describe_options*)$an_item)->describe_strategy
			]"
		end

	set_c_describe_strategy (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_describe_options*)$an_item)->describe_strategy =  (unsigned int)$a_value
			]"
		ensure
			describe_strategy_set: a_value = c_describe_strategy (an_item)
		end

	c_pattern (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_describe_options*)$an_item)->pattern
			]"
		end

	set_c_pattern (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_describe_options*)$an_item)->pattern =  (char const*)$a_value
			]"
		ensure
			pattern_set: a_value = c_pattern (an_item)
		end

	c_only_follow_first_parent (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_describe_options*)$an_item)->only_follow_first_parent
			]"
		end

	set_c_only_follow_first_parent (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_describe_options*)$an_item)->only_follow_first_parent =  (int)$a_value
			]"
		ensure
			only_follow_first_parent_set: a_value = c_only_follow_first_parent (an_item)
		end

	c_show_commit_oid_as_fallback (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_describe_options*)$an_item)->show_commit_oid_as_fallback
			]"
		end

	set_c_show_commit_oid_as_fallback (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_describe_options*)$an_item)->show_commit_oid_as_fallback =  (int)$a_value
			]"
		ensure
			show_commit_oid_as_fallback_set: a_value = c_show_commit_oid_as_fallback (an_item)
		end

end
