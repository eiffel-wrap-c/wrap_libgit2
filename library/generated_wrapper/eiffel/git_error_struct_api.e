note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class GIT_ERROR_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	message:  detachable C_STRING
			-- Access member `message`
		require
			exists: exists
		do
			if attached c_message (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_message (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_message (a_value: C_STRING) 
			-- Change the value of member `message` to `a_value`.
		require
			exists: exists
		do
			set_c_message (item, a_value.item )
		end

	klass: INTEGER
			-- Access member `klass`
		require
			exists: exists
		do
			Result := c_klass (item)
		ensure
			result_correct: Result = c_klass (item)
		end

	set_klass (a_value: INTEGER) 
			-- Change the value of member `klass` to `a_value`.
		require
			exists: exists
		do
			set_c_klass (item, a_value)
		ensure
			klass_set: a_value = klass
		end

feature {NONE} -- Implementation wrapper for struct git_error

	sizeof_external: INTEGER 
		external
			"C inline use <git2.h>"
		alias
			"sizeof(git_error)"
		end

	c_message (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_error*)$an_item)->message
			]"
		end

	set_c_message (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_error*)$an_item)->message =  (char*)$a_value
			]"
		ensure
			message_set: a_value = c_message (an_item)
		end

	c_klass (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_error*)$an_item)->klass
			]"
		end

	set_c_klass (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_error*)$an_item)->klass =  (int)$a_value
			]"
		ensure
			klass_set: a_value = c_klass (an_item)
		end

end
