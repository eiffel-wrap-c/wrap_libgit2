note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"
-- functions wrapper
class GIT_INDEX_API


feature -- Access

	git_index_open (a_out: GIT_INDEX_STRUCT_API; index_path: STRING): INTEGER 
		local
			index_path_c_string: C_STRING
		do
			create index_path_c_string.make (index_path)
			Result := c_git_index_open (a_out.item, index_path_c_string.item)
		ensure
			instance_free: class
		end

	git_index_new (a_out: GIT_INDEX_STRUCT_API): INTEGER 
		do
			Result := c_git_index_new (a_out.item)
		ensure
			instance_free: class
		end

	git_index_free (index: GIT_INDEX_STRUCT_API) 
		do
			c_git_index_free (index.item)
		ensure
			instance_free: class
		end

	git_index_owner (index: GIT_INDEX_STRUCT_API): detachable GIT_REPOSITORY_STRUCT_API 
		do
			if attached c_git_index_owner (index.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	git_index_caps (index: GIT_INDEX_STRUCT_API): INTEGER 
		do
			Result := c_git_index_caps (index.item)
		ensure
			instance_free: class
		end

	git_index_set_caps (index: GIT_INDEX_STRUCT_API; caps: INTEGER): INTEGER 
		do
			Result := c_git_index_set_caps (index.item, caps)
		ensure
			instance_free: class
		end

	git_index_version (index: GIT_INDEX_STRUCT_API): INTEGER 
		do
			Result := c_git_index_version (index.item)
		ensure
			instance_free: class
		end

	git_index_set_version (index: GIT_INDEX_STRUCT_API; version: INTEGER): INTEGER 
		do
			Result := c_git_index_set_version (index.item, version)
		ensure
			instance_free: class
		end

	git_index_read (index: GIT_INDEX_STRUCT_API; force: INTEGER): INTEGER 
		do
			Result := c_git_index_read (index.item, force)
		ensure
			instance_free: class
		end

	git_index_write (index: GIT_INDEX_STRUCT_API): INTEGER 
		do
			Result := c_git_index_write (index.item)
		ensure
			instance_free: class
		end

	git_index_path (index: GIT_INDEX_STRUCT_API): POINTER 
		do
			Result := c_git_index_path (index.item)
		ensure
			instance_free: class
		end

	git_index_checksum (index: GIT_INDEX_STRUCT_API): detachable GIT_OID_STRUCT_API 
		do
			if attached c_git_index_checksum (index.item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	git_index_read_tree (index: GIT_INDEX_STRUCT_API; tree: GIT_TREE_STRUCT_API): INTEGER 
		do
			Result := c_git_index_read_tree (index.item, tree.item)
		ensure
			instance_free: class
		end

	git_index_write_tree (a_out: GIT_OID_STRUCT_API; index: GIT_INDEX_STRUCT_API): INTEGER 
		do
			Result := c_git_index_write_tree (a_out.item, index.item)
		ensure
			instance_free: class
		end

	git_index_write_tree_to (a_out: GIT_OID_STRUCT_API; index: GIT_INDEX_STRUCT_API; repo: GIT_REPOSITORY_STRUCT_API): INTEGER 
		do
			Result := c_git_index_write_tree_to (a_out.item, index.item, repo.item)
		ensure
			instance_free: class
		end

	git_index_entrycount (index: GIT_INDEX_STRUCT_API): INTEGER 
		do
			Result := c_git_index_entrycount (index.item)
		ensure
			instance_free: class
		end

	git_index_clear (index: GIT_INDEX_STRUCT_API): INTEGER 
		do
			Result := c_git_index_clear (index.item)
		ensure
			instance_free: class
		end

	git_index_get_byindex (index: GIT_INDEX_STRUCT_API; n: INTEGER): detachable GIT_INDEX_ENTRY_STRUCT_API 
		do
			if attached c_git_index_get_byindex (index.item, n) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	git_index_get_bypath (index: GIT_INDEX_STRUCT_API; path: STRING; stage: INTEGER): detachable GIT_INDEX_ENTRY_STRUCT_API 
		local
			path_c_string: C_STRING
		do
			create path_c_string.make (path)
			if attached c_git_index_get_bypath (index.item, path_c_string.item, stage) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		ensure
			instance_free: class
		end

	git_index_remove (index: GIT_INDEX_STRUCT_API; path: STRING; stage: INTEGER): INTEGER 
		local
			path_c_string: C_STRING
		do
			create path_c_string.make (path)
			Result := c_git_index_remove (index.item, path_c_string.item, stage)
		ensure
			instance_free: class
		end

	git_index_remove_directory (index: GIT_INDEX_STRUCT_API; dir: STRING; stage: INTEGER): INTEGER 
		local
			dir_c_string: C_STRING
		do
			create dir_c_string.make (dir)
			Result := c_git_index_remove_directory (index.item, dir_c_string.item, stage)
		ensure
			instance_free: class
		end

	git_index_add (index: GIT_INDEX_STRUCT_API; source_entry: GIT_INDEX_ENTRY_STRUCT_API): INTEGER 
		do
			Result := c_git_index_add (index.item, source_entry.item)
		ensure
			instance_free: class
		end

	git_index_entry_stage (entry: GIT_INDEX_ENTRY_STRUCT_API): INTEGER 
		do
			Result := c_git_index_entry_stage (entry.item)
		ensure
			instance_free: class
		end

	git_index_entry_is_conflict (entry: GIT_INDEX_ENTRY_STRUCT_API): INTEGER 
		do
			Result := c_git_index_entry_is_conflict (entry.item)
		ensure
			instance_free: class
		end

	git_index_iterator_new (iterator_out: GIT_INDEX_ITERATOR_STRUCT_API; index: GIT_INDEX_STRUCT_API): INTEGER 
		do
			Result := c_git_index_iterator_new (iterator_out.item, index.item)
		ensure
			instance_free: class
		end

	git_index_iterator_next (a_out: GIT_INDEX_ENTRY_STRUCT_API; iterator: GIT_INDEX_ITERATOR_STRUCT_API): INTEGER 
		do
			Result := c_git_index_iterator_next (a_out.item, iterator.item)
		ensure
			instance_free: class
		end

	git_index_iterator_free (iterator: GIT_INDEX_ITERATOR_STRUCT_API) 
		do
			c_git_index_iterator_free (iterator.item)
		ensure
			instance_free: class
		end

	git_index_add_bypath (index: GIT_INDEX_STRUCT_API; path: STRING): INTEGER 
		local
			path_c_string: C_STRING
		do
			create path_c_string.make (path)
			Result := c_git_index_add_bypath (index.item, path_c_string.item)
		ensure
			instance_free: class
		end

	git_index_add_from_buffer (index: GIT_INDEX_STRUCT_API; entry: GIT_INDEX_ENTRY_STRUCT_API; buffer: POINTER; len: INTEGER): INTEGER 
		do
			Result := c_git_index_add_from_buffer (index.item, entry.item, buffer, len)
		ensure
			instance_free: class
		end

	git_index_remove_bypath (index: GIT_INDEX_STRUCT_API; path: STRING): INTEGER 
		local
			path_c_string: C_STRING
		do
			create path_c_string.make (path)
			Result := c_git_index_remove_bypath (index.item, path_c_string.item)
		ensure
			instance_free: class
		end

	git_index_add_all (index: GIT_INDEX_STRUCT_API; pathspec: GIT_STRARRAY_STRUCT_API; flags: INTEGER; callback: POINTER; payload: POINTER): INTEGER 
		do
			Result := c_git_index_add_all (index.item, pathspec.item, flags, callback, payload)
		ensure
			instance_free: class
		end

	git_index_remove_all (index: GIT_INDEX_STRUCT_API; pathspec: GIT_STRARRAY_STRUCT_API; callback: POINTER; payload: POINTER): INTEGER 
		do
			Result := c_git_index_remove_all (index.item, pathspec.item, callback, payload)
		ensure
			instance_free: class
		end

	git_index_update_all (index: GIT_INDEX_STRUCT_API; pathspec: GIT_STRARRAY_STRUCT_API; callback: POINTER; payload: POINTER): INTEGER 
		do
			Result := c_git_index_update_all (index.item, pathspec.item, callback, payload)
		ensure
			instance_free: class
		end

	git_index_find (at_pos: POINTER; index: GIT_INDEX_STRUCT_API; path: STRING): INTEGER 
		local
			path_c_string: C_STRING
		do
			create path_c_string.make (path)
			Result := c_git_index_find (at_pos, index.item, path_c_string.item)
		ensure
			instance_free: class
		end

	git_index_find_prefix (at_pos: POINTER; index: GIT_INDEX_STRUCT_API; a_prefix: STRING): INTEGER 
		local
			a_prefix_c_string: C_STRING
		do
			create a_prefix_c_string.make (a_prefix)
			Result := c_git_index_find_prefix (at_pos, index.item, a_prefix_c_string.item)
		ensure
			instance_free: class
		end

	git_index_conflict_add (index: GIT_INDEX_STRUCT_API; ancestor_entry: GIT_INDEX_ENTRY_STRUCT_API; our_entry: GIT_INDEX_ENTRY_STRUCT_API; their_entry: GIT_INDEX_ENTRY_STRUCT_API): INTEGER 
		do
			Result := c_git_index_conflict_add (index.item, ancestor_entry.item, our_entry.item, their_entry.item)
		ensure
			instance_free: class
		end

	git_index_conflict_get (ancestor_out: GIT_INDEX_ENTRY_STRUCT_API; our_out: GIT_INDEX_ENTRY_STRUCT_API; their_out: GIT_INDEX_ENTRY_STRUCT_API; index: GIT_INDEX_STRUCT_API; path: STRING): INTEGER 
		local
			path_c_string: C_STRING
		do
			create path_c_string.make (path)
			Result := c_git_index_conflict_get (ancestor_out.item, our_out.item, their_out.item, index.item, path_c_string.item)
		ensure
			instance_free: class
		end

	git_index_conflict_remove (index: GIT_INDEX_STRUCT_API; path: STRING): INTEGER 
		local
			path_c_string: C_STRING
		do
			create path_c_string.make (path)
			Result := c_git_index_conflict_remove (index.item, path_c_string.item)
		ensure
			instance_free: class
		end

	git_index_conflict_cleanup (index: GIT_INDEX_STRUCT_API): INTEGER 
		do
			Result := c_git_index_conflict_cleanup (index.item)
		ensure
			instance_free: class
		end

	git_index_has_conflicts (index: GIT_INDEX_STRUCT_API): INTEGER 
		do
			Result := c_git_index_has_conflicts (index.item)
		ensure
			instance_free: class
		end

	git_index_conflict_iterator_new (iterator_out: GIT_INDEX_CONFLICT_ITERATOR_STRUCT_API; index: GIT_INDEX_STRUCT_API): INTEGER 
		do
			Result := c_git_index_conflict_iterator_new (iterator_out.item, index.item)
		ensure
			instance_free: class
		end

	git_index_conflict_next (ancestor_out: GIT_INDEX_ENTRY_STRUCT_API; our_out: GIT_INDEX_ENTRY_STRUCT_API; their_out: GIT_INDEX_ENTRY_STRUCT_API; iterator: GIT_INDEX_CONFLICT_ITERATOR_STRUCT_API): INTEGER 
		do
			Result := c_git_index_conflict_next (ancestor_out.item, our_out.item, their_out.item, iterator.item)
		ensure
			instance_free: class
		end

	git_index_conflict_iterator_free (iterator: GIT_INDEX_CONFLICT_ITERATOR_STRUCT_API) 
		do
			c_git_index_conflict_iterator_free (iterator.item)
		ensure
			instance_free: class
		end

	git_index_add_frombuffer (index: GIT_INDEX_STRUCT_API; entry: GIT_INDEX_ENTRY_STRUCT_API; buffer: POINTER; len: INTEGER): INTEGER 
		do
			Result := c_git_index_add_frombuffer (index.item, entry.item, buffer, len)
		ensure
			instance_free: class
		end

feature -- Externals

	c_git_index_open (a_out: POINTER; index_path: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_open ((git_index**)$a_out, (char const*)$index_path);
			]"
		end

	c_git_index_new (a_out: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_new ((git_index**)$a_out);
			]"
		end

	c_git_index_free (index: POINTER)
		external
			"C inline use <git2.h>"
		alias
			"[
				git_index_free ((git_index*)$index);
			]"
		end

	c_git_index_owner (index: POINTER): POINTER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_owner ((git_index const*)$index);
			]"
		end

	c_git_index_caps (index: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_caps ((git_index const*)$index);
			]"
		end

	c_git_index_set_caps (index: POINTER; caps: INTEGER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_set_caps ((git_index*)$index, (int)$caps);
			]"
		end

	c_git_index_version (index: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_version ((git_index*)$index);
			]"
		end

	c_git_index_set_version (index: POINTER; version: INTEGER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_set_version ((git_index*)$index, (unsigned int)$version);
			]"
		end

	c_git_index_read (index: POINTER; force: INTEGER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_read ((git_index*)$index, (int)$force);
			]"
		end

	c_git_index_write (index: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_write ((git_index*)$index);
			]"
		end

	c_git_index_path (index: POINTER): POINTER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_path ((git_index const*)$index);
			]"
		end

	c_git_index_checksum (index: POINTER): POINTER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_checksum ((git_index*)$index);
			]"
		end

	c_git_index_read_tree (index: POINTER; tree: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_read_tree ((git_index*)$index, (git_tree const*)$tree);
			]"
		end

	c_git_index_write_tree (a_out: POINTER; index: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_write_tree ((git_oid*)$a_out, (git_index*)$index);
			]"
		end

	c_git_index_write_tree_to (a_out: POINTER; index: POINTER; repo: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_write_tree_to ((git_oid*)$a_out, (git_index*)$index, (git_repository*)$repo);
			]"
		end

	c_git_index_entrycount (index: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_entrycount ((git_index const*)$index);
			]"
		end

	c_git_index_clear (index: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_clear ((git_index*)$index);
			]"
		end

	c_git_index_get_byindex (index: POINTER; n: INTEGER): POINTER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_get_byindex ((git_index*)$index, (size_t)$n);
			]"
		end

	c_git_index_get_bypath (index: POINTER; path: POINTER; stage: INTEGER): POINTER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_get_bypath ((git_index*)$index, (char const*)$path, (int)$stage);
			]"
		end

	c_git_index_remove (index: POINTER; path: POINTER; stage: INTEGER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_remove ((git_index*)$index, (char const*)$path, (int)$stage);
			]"
		end

	c_git_index_remove_directory (index: POINTER; dir: POINTER; stage: INTEGER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_remove_directory ((git_index*)$index, (char const*)$dir, (int)$stage);
			]"
		end

	c_git_index_add (index: POINTER; source_entry: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_add ((git_index*)$index, (git_index_entry const*)$source_entry);
			]"
		end

	c_git_index_entry_stage (entry: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_entry_stage ((git_index_entry const*)$entry);
			]"
		end

	c_git_index_entry_is_conflict (entry: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_entry_is_conflict ((git_index_entry const*)$entry);
			]"
		end

	c_git_index_iterator_new (iterator_out: POINTER; index: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_iterator_new ((git_index_iterator**)$iterator_out, (git_index*)$index);
			]"
		end

	c_git_index_iterator_next (a_out: POINTER; iterator: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_iterator_next ((git_index_entry const**)$a_out, (git_index_iterator*)$iterator);
			]"
		end

	c_git_index_iterator_free (iterator: POINTER)
		external
			"C inline use <git2.h>"
		alias
			"[
				git_index_iterator_free ((git_index_iterator*)$iterator);
			]"
		end

	c_git_index_add_bypath (index: POINTER; path: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_add_bypath ((git_index*)$index, (char const*)$path);
			]"
		end

	c_git_index_add_from_buffer (index: POINTER; entry: POINTER; buffer: POINTER; len: INTEGER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_add_from_buffer ((git_index*)$index, (git_index_entry const*)$entry, (void const*)$buffer, (size_t)$len);
			]"
		end

	c_git_index_remove_bypath (index: POINTER; path: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_remove_bypath ((git_index*)$index, (char const*)$path);
			]"
		end

	c_git_index_add_all (index: POINTER; pathspec: POINTER; flags: INTEGER; callback: POINTER; payload: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_add_all ((git_index*)$index, (git_strarray const*)$pathspec, (unsigned int)$flags, (git_index_matched_path_cb)$callback, (void*)$payload);
			]"
		end

	c_git_index_remove_all (index: POINTER; pathspec: POINTER; callback: POINTER; payload: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_remove_all ((git_index*)$index, (git_strarray const*)$pathspec, (git_index_matched_path_cb)$callback, (void*)$payload);
			]"
		end

	c_git_index_update_all (index: POINTER; pathspec: POINTER; callback: POINTER; payload: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_update_all ((git_index*)$index, (git_strarray const*)$pathspec, (git_index_matched_path_cb)$callback, (void*)$payload);
			]"
		end

	c_git_index_find (at_pos: POINTER; index: POINTER; path: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_find ((size_t*)$at_pos, (git_index*)$index, (char const*)$path);
			]"
		end

	c_git_index_find_prefix (at_pos: POINTER; index: POINTER; a_prefix: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_find_prefix ((size_t*)$at_pos, (git_index*)$index, (char const*)$a_prefix);
			]"
		end

	c_git_index_conflict_add (index: POINTER; ancestor_entry: POINTER; our_entry: POINTER; their_entry: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_conflict_add ((git_index*)$index, (git_index_entry const*)$ancestor_entry, (git_index_entry const*)$our_entry, (git_index_entry const*)$their_entry);
			]"
		end

	c_git_index_conflict_get (ancestor_out: POINTER; our_out: POINTER; their_out: POINTER; index: POINTER; path: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_conflict_get ((git_index_entry const**)$ancestor_out, (git_index_entry const**)$our_out, (git_index_entry const**)$their_out, (git_index*)$index, (char const*)$path);
			]"
		end

	c_git_index_conflict_remove (index: POINTER; path: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_conflict_remove ((git_index*)$index, (char const*)$path);
			]"
		end

	c_git_index_conflict_cleanup (index: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_conflict_cleanup ((git_index*)$index);
			]"
		end

	c_git_index_has_conflicts (index: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_has_conflicts ((git_index const*)$index);
			]"
		end

	c_git_index_conflict_iterator_new (iterator_out: POINTER; index: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_conflict_iterator_new ((git_index_conflict_iterator**)$iterator_out, (git_index*)$index);
			]"
		end

	c_git_index_conflict_next (ancestor_out: POINTER; our_out: POINTER; their_out: POINTER; iterator: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_conflict_next ((git_index_entry const**)$ancestor_out, (git_index_entry const**)$our_out, (git_index_entry const**)$their_out, (git_index_conflict_iterator*)$iterator);
			]"
		end

	c_git_index_conflict_iterator_free (iterator: POINTER)
		external
			"C inline use <git2.h>"
		alias
			"[
				git_index_conflict_iterator_free ((git_index_conflict_iterator*)$iterator);
			]"
		end

	c_git_index_add_frombuffer (index: POINTER; entry: POINTER; buffer: POINTER; len: INTEGER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_index_add_frombuffer ((git_index*)$index, (git_index_entry const*)$entry, (void const*)$buffer, (size_t)$len);
			]"
		end

feature -- Externals Address

end
