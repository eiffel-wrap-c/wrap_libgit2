note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class GIT_INDEXER_OPTIONS_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	version: INTEGER
			-- Access member `version`
		require
			exists: exists
		do
			Result := c_version (item)
		ensure
			result_correct: Result = c_version (item)
		end

	set_version (a_value: INTEGER) 
			-- Change the value of member `version` to `a_value`.
		require
			exists: exists
		do
			set_c_version (item, a_value)
		ensure
			version_set: a_value = version
		end

	progress_cb: POINTER
			-- Access member `progress_cb`
		require
			exists: exists
		do
			Result := c_progress_cb (item)
		ensure
			result_correct: Result = c_progress_cb (item)
		end

	set_progress_cb (a_value: POINTER) 
			-- Change the value of member `progress_cb` to `a_value`.
		require
			exists: exists
		do
			set_c_progress_cb (item, a_value)
		ensure
			progress_cb_set: a_value = progress_cb
		end

	progress_cb_payload: POINTER
			-- Access member `progress_cb_payload`
		require
			exists: exists
		do
			Result := c_progress_cb_payload (item)
		ensure
			result_correct: Result = c_progress_cb_payload (item)
		end

	set_progress_cb_payload (a_value: POINTER) 
			-- Change the value of member `progress_cb_payload` to `a_value`.
		require
			exists: exists
		do
			set_c_progress_cb_payload (item, a_value)
		ensure
			progress_cb_payload_set: a_value = progress_cb_payload
		end

	verify: INTEGER
			-- Access member `verify`
		require
			exists: exists
		do
			Result := c_verify (item)
		ensure
			result_correct: Result = c_verify (item)
		end

	set_verify (a_value: INTEGER) 
			-- Change the value of member `verify` to `a_value`.
		require
			exists: exists
		do
			set_c_verify (item, a_value)
		ensure
			verify_set: a_value = verify
		end

feature {NONE} -- Implementation wrapper for struct struct git_indexer_options

	sizeof_external: INTEGER 
		external
			"C inline use <git2.h>"
		alias
			"sizeof(struct git_indexer_options)"
		end

	c_version (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_indexer_options*)$an_item)->version
			]"
		end

	set_c_version (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_indexer_options*)$an_item)->version =  (unsigned int)$a_value
			]"
		ensure
			version_set: a_value = c_version (an_item)
		end

	c_progress_cb (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_indexer_options*)$an_item)->progress_cb
			]"
		end

	set_c_progress_cb (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_indexer_options*)$an_item)->progress_cb =  (git_indexer_progress_cb)$a_value
			]"
		ensure
			progress_cb_set: a_value = c_progress_cb (an_item)
		end

	c_progress_cb_payload (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_indexer_options*)$an_item)->progress_cb_payload
			]"
		end

	set_c_progress_cb_payload (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_indexer_options*)$an_item)->progress_cb_payload =  (void*)$a_value
			]"
		ensure
			progress_cb_payload_set: a_value = c_progress_cb_payload (an_item)
		end

	c_verify (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_indexer_options*)$an_item)->verify
			]"
		end

	set_c_verify (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_indexer_options*)$an_item)->verify =  (unsigned char)$a_value
			]"
		ensure
			verify_set: a_value = c_verify (an_item)
		end

end
