note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class GIT_INDEXER_PROGRESS_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	total_objects: INTEGER
			-- Access member `total_objects`
		require
			exists: exists
		do
			Result := c_total_objects (item)
		ensure
			result_correct: Result = c_total_objects (item)
		end

	set_total_objects (a_value: INTEGER) 
			-- Change the value of member `total_objects` to `a_value`.
		require
			exists: exists
		do
			set_c_total_objects (item, a_value)
		ensure
			total_objects_set: a_value = total_objects
		end

	indexed_objects: INTEGER
			-- Access member `indexed_objects`
		require
			exists: exists
		do
			Result := c_indexed_objects (item)
		ensure
			result_correct: Result = c_indexed_objects (item)
		end

	set_indexed_objects (a_value: INTEGER) 
			-- Change the value of member `indexed_objects` to `a_value`.
		require
			exists: exists
		do
			set_c_indexed_objects (item, a_value)
		ensure
			indexed_objects_set: a_value = indexed_objects
		end

	received_objects: INTEGER
			-- Access member `received_objects`
		require
			exists: exists
		do
			Result := c_received_objects (item)
		ensure
			result_correct: Result = c_received_objects (item)
		end

	set_received_objects (a_value: INTEGER) 
			-- Change the value of member `received_objects` to `a_value`.
		require
			exists: exists
		do
			set_c_received_objects (item, a_value)
		ensure
			received_objects_set: a_value = received_objects
		end

	local_objects: INTEGER
			-- Access member `local_objects`
		require
			exists: exists
		do
			Result := c_local_objects (item)
		ensure
			result_correct: Result = c_local_objects (item)
		end

	set_local_objects (a_value: INTEGER) 
			-- Change the value of member `local_objects` to `a_value`.
		require
			exists: exists
		do
			set_c_local_objects (item, a_value)
		ensure
			local_objects_set: a_value = local_objects
		end

	total_deltas: INTEGER
			-- Access member `total_deltas`
		require
			exists: exists
		do
			Result := c_total_deltas (item)
		ensure
			result_correct: Result = c_total_deltas (item)
		end

	set_total_deltas (a_value: INTEGER) 
			-- Change the value of member `total_deltas` to `a_value`.
		require
			exists: exists
		do
			set_c_total_deltas (item, a_value)
		ensure
			total_deltas_set: a_value = total_deltas
		end

	indexed_deltas: INTEGER
			-- Access member `indexed_deltas`
		require
			exists: exists
		do
			Result := c_indexed_deltas (item)
		ensure
			result_correct: Result = c_indexed_deltas (item)
		end

	set_indexed_deltas (a_value: INTEGER) 
			-- Change the value of member `indexed_deltas` to `a_value`.
		require
			exists: exists
		do
			set_c_indexed_deltas (item, a_value)
		ensure
			indexed_deltas_set: a_value = indexed_deltas
		end

	received_bytes: INTEGER
			-- Access member `received_bytes`
		require
			exists: exists
		do
			Result := c_received_bytes (item)
		ensure
			result_correct: Result = c_received_bytes (item)
		end

	set_received_bytes (a_value: INTEGER) 
			-- Change the value of member `received_bytes` to `a_value`.
		require
			exists: exists
		do
			set_c_received_bytes (item, a_value)
		ensure
			received_bytes_set: a_value = received_bytes
		end

feature {NONE} -- Implementation wrapper for struct struct git_indexer_progress

	sizeof_external: INTEGER 
		external
			"C inline use <git2.h>"
		alias
			"sizeof(struct git_indexer_progress)"
		end

	c_total_objects (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_indexer_progress*)$an_item)->total_objects
			]"
		end

	set_c_total_objects (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_indexer_progress*)$an_item)->total_objects =  (unsigned int)$a_value
			]"
		ensure
			total_objects_set: a_value = c_total_objects (an_item)
		end

	c_indexed_objects (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_indexer_progress*)$an_item)->indexed_objects
			]"
		end

	set_c_indexed_objects (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_indexer_progress*)$an_item)->indexed_objects =  (unsigned int)$a_value
			]"
		ensure
			indexed_objects_set: a_value = c_indexed_objects (an_item)
		end

	c_received_objects (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_indexer_progress*)$an_item)->received_objects
			]"
		end

	set_c_received_objects (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_indexer_progress*)$an_item)->received_objects =  (unsigned int)$a_value
			]"
		ensure
			received_objects_set: a_value = c_received_objects (an_item)
		end

	c_local_objects (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_indexer_progress*)$an_item)->local_objects
			]"
		end

	set_c_local_objects (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_indexer_progress*)$an_item)->local_objects =  (unsigned int)$a_value
			]"
		ensure
			local_objects_set: a_value = c_local_objects (an_item)
		end

	c_total_deltas (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_indexer_progress*)$an_item)->total_deltas
			]"
		end

	set_c_total_deltas (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_indexer_progress*)$an_item)->total_deltas =  (unsigned int)$a_value
			]"
		ensure
			total_deltas_set: a_value = c_total_deltas (an_item)
		end

	c_indexed_deltas (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_indexer_progress*)$an_item)->indexed_deltas
			]"
		end

	set_c_indexed_deltas (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_indexer_progress*)$an_item)->indexed_deltas =  (unsigned int)$a_value
			]"
		ensure
			indexed_deltas_set: a_value = c_indexed_deltas (an_item)
		end

	c_received_bytes (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_indexer_progress*)$an_item)->received_bytes
			]"
		end

	set_c_received_bytes (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_indexer_progress*)$an_item)->received_bytes =  (size_t)$a_value
			]"
		ensure
			received_bytes_set: a_value = c_received_bytes (an_item)
		end

end
