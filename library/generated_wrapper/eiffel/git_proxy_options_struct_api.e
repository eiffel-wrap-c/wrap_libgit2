note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class GIT_PROXY_OPTIONS_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	version: INTEGER
			-- Access member `version`
		require
			exists: exists
		do
			Result := c_version (item)
		ensure
			result_correct: Result = c_version (item)
		end

	set_version (a_value: INTEGER) 
			-- Change the value of member `version` to `a_value`.
		require
			exists: exists
		do
			set_c_version (item, a_value)
		ensure
			version_set: a_value = version
		end

	type: INTEGER
			-- Access member `type`
		require
			exists: exists
		do
			Result := c_type (item)
		ensure
			result_correct: Result = c_type (item)
		end

	set_type (a_value: INTEGER) 
			-- Change the value of member `type` to `a_value`.
		require
			exists: exists
		do
			set_c_type (item, a_value)
		ensure
			type_set: a_value = type
		end

	url:  detachable STRING
			-- Access member `url`
		require
			exists: exists
		do
			if attached c_url (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_url (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_url (a_value: STRING) 
			-- Change the value of member `url` to `a_value`.
		require
			exists: exists
		do
			set_c_url (item, (create {C_STRING}.make (a_value)).item )
		end

	credentials: POINTER
			-- Access member `credentials`
		require
			exists: exists
		do
			Result := c_credentials (item)
		ensure
			result_correct: Result = c_credentials (item)
		end

	set_credentials (a_value: POINTER) 
			-- Change the value of member `credentials` to `a_value`.
		require
			exists: exists
		do
			set_c_credentials (item, a_value)
		ensure
			credentials_set: a_value = credentials
		end

	certificate_check: POINTER
			-- Access member `certificate_check`
		require
			exists: exists
		do
			Result := c_certificate_check (item)
		ensure
			result_correct: Result = c_certificate_check (item)
		end

	set_certificate_check (a_value: POINTER) 
			-- Change the value of member `certificate_check` to `a_value`.
		require
			exists: exists
		do
			set_c_certificate_check (item, a_value)
		ensure
			certificate_check_set: a_value = certificate_check
		end

	payload: POINTER
			-- Access member `payload`
		require
			exists: exists
		do
			Result := c_payload (item)
		ensure
			result_correct: Result = c_payload (item)
		end

	set_payload (a_value: POINTER) 
			-- Change the value of member `payload` to `a_value`.
		require
			exists: exists
		do
			set_c_payload (item, a_value)
		ensure
			payload_set: a_value = payload
		end

feature {NONE} -- Implementation wrapper for struct git_proxy_options

	sizeof_external: INTEGER 
		external
			"C inline use <git2.h>"
		alias
			"sizeof(git_proxy_options)"
		end

	c_version (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_proxy_options*)$an_item)->version
			]"
		end

	set_c_version (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_proxy_options*)$an_item)->version =  (unsigned int)$a_value
			]"
		ensure
			version_set: a_value = c_version (an_item)
		end

	c_type (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_proxy_options*)$an_item)->type
			]"
		end

	set_c_type (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_proxy_options*)$an_item)->type =  (git_proxy_t)$a_value
			]"
		ensure
			type_set: a_value = c_type (an_item)
		end

	c_url (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_proxy_options*)$an_item)->url
			]"
		end

	set_c_url (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_proxy_options*)$an_item)->url =  (char const*)$a_value
			]"
		ensure
			url_set: a_value = c_url (an_item)
		end

	c_credentials (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_proxy_options*)$an_item)->credentials
			]"
		end

	set_c_credentials (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_proxy_options*)$an_item)->credentials =  (git_credential_acquire_cb)$a_value
			]"
		ensure
			credentials_set: a_value = c_credentials (an_item)
		end

	c_certificate_check (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_proxy_options*)$an_item)->certificate_check
			]"
		end

	set_c_certificate_check (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_proxy_options*)$an_item)->certificate_check =  (git_transport_certificate_check_cb)$a_value
			]"
		ensure
			certificate_check_set: a_value = c_certificate_check (an_item)
		end

	c_payload (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_proxy_options*)$an_item)->payload
			]"
		end

	set_c_payload (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_proxy_options*)$an_item)->payload =  (void*)$a_value
			]"
		ensure
			payload_set: a_value = c_payload (an_item)
		end

end
