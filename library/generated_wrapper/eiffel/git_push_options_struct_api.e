note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class GIT_PUSH_OPTIONS_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	version: INTEGER
			-- Access member `version`
		require
			exists: exists
		do
			Result := c_version (item)
		ensure
			result_correct: Result = c_version (item)
		end

	set_version (a_value: INTEGER) 
			-- Change the value of member `version` to `a_value`.
		require
			exists: exists
		do
			set_c_version (item, a_value)
		ensure
			version_set: a_value = version
		end

	pb_parallelism: INTEGER
			-- Access member `pb_parallelism`
		require
			exists: exists
		do
			Result := c_pb_parallelism (item)
		ensure
			result_correct: Result = c_pb_parallelism (item)
		end

	set_pb_parallelism (a_value: INTEGER) 
			-- Change the value of member `pb_parallelism` to `a_value`.
		require
			exists: exists
		do
			set_c_pb_parallelism (item, a_value)
		ensure
			pb_parallelism_set: a_value = pb_parallelism
		end

	callbacks: detachable GIT_REMOTE_CALLBACKS_STRUCT_API
			-- Access member `callbacks`
		require
			exists: exists
		do
			if attached c_callbacks (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_callbacks (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_callbacks (item) 
		end

	set_callbacks (a_value: GIT_REMOTE_CALLBACKS_STRUCT_API) 
			-- Set member `callbacks`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_callbacks (item, a_value.item)
		ensure
			callbacks_set: attached callbacks as l_value implies l_value.item = a_value.item
		end

	proxy_opts: detachable GIT_PROXY_OPTIONS_STRUCT_API
			-- Access member `proxy_opts`
		require
			exists: exists
		do
			if attached c_proxy_opts (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_proxy_opts (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_proxy_opts (item) 
		end

	set_proxy_opts (a_value: GIT_PROXY_OPTIONS_STRUCT_API) 
			-- Set member `proxy_opts`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_proxy_opts (item, a_value.item)
		ensure
			proxy_opts_set: attached proxy_opts as l_value implies l_value.item = a_value.item
		end

	custom_headers: detachable GIT_STRARRAY_STRUCT_API
			-- Access member `custom_headers`
		require
			exists: exists
		do
			if attached c_custom_headers (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_custom_headers (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_custom_headers (item) 
		end

	set_custom_headers (a_value: GIT_STRARRAY_STRUCT_API) 
			-- Set member `custom_headers`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_custom_headers (item, a_value.item)
		ensure
			custom_headers_set: attached custom_headers as l_value implies l_value.item = a_value.item
		end

feature {NONE} -- Implementation wrapper for struct git_push_options

	sizeof_external: INTEGER 
		external
			"C inline use <git2.h>"
		alias
			"sizeof(git_push_options)"
		end

	c_version (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_push_options*)$an_item)->version
			]"
		end

	set_c_version (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_push_options*)$an_item)->version =  (unsigned int)$a_value
			]"
		ensure
			version_set: a_value = c_version (an_item)
		end

	c_pb_parallelism (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_push_options*)$an_item)->pb_parallelism
			]"
		end

	set_c_pb_parallelism (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_push_options*)$an_item)->pb_parallelism =  (unsigned int)$a_value
			]"
		ensure
			pb_parallelism_set: a_value = c_pb_parallelism (an_item)
		end

	c_callbacks (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				&((git_push_options*)$an_item)->callbacks
			]"
		end

	set_c_callbacks (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_push_options*)$an_item)->callbacks =  *(git_remote_callbacks*)$a_value
			]"
		end

	c_proxy_opts (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				&((git_push_options*)$an_item)->proxy_opts
			]"
		end

	set_c_proxy_opts (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_push_options*)$an_item)->proxy_opts =  *(git_proxy_options*)$a_value
			]"
		end

	c_custom_headers (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				&((git_push_options*)$an_item)->custom_headers
			]"
		end

	set_c_custom_headers (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_push_options*)$an_item)->custom_headers =  *(git_strarray*)$a_value
			]"
		end

end
