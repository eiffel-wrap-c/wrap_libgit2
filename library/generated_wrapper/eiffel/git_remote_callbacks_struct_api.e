note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class GIT_REMOTE_CALLBACKS_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	version: INTEGER
			-- Access member `version`
		require
			exists: exists
		do
			Result := c_version (item)
		ensure
			result_correct: Result = c_version (item)
		end

	set_version (a_value: INTEGER) 
			-- Change the value of member `version` to `a_value`.
		require
			exists: exists
		do
			set_c_version (item, a_value)
		ensure
			version_set: a_value = version
		end

	sideband_progress: POINTER
			-- Access member `sideband_progress`
		require
			exists: exists
		do
			Result := c_sideband_progress (item)
		ensure
			result_correct: Result = c_sideband_progress (item)
		end

	set_sideband_progress (a_value: POINTER) 
			-- Change the value of member `sideband_progress` to `a_value`.
		require
			exists: exists
		do
			set_c_sideband_progress (item, a_value)
		ensure
			sideband_progress_set: a_value = sideband_progress
		end

	completion: POINTER
			-- Access member `completion`
		require
			exists: exists
		do
			Result := c_completion (item)
		ensure
			result_correct: Result = c_completion (item)
		end

	set_completion (a_value: POINTER) 
			-- Change the value of member `completion` to `a_value`.
		require
			exists: exists
		do
			set_c_completion (item, a_value)
		ensure
			completion_set: a_value = completion
		end

	credentials: POINTER
			-- Access member `credentials`
		require
			exists: exists
		do
			Result := c_credentials (item)
		ensure
			result_correct: Result = c_credentials (item)
		end

	set_credentials (a_value: POINTER) 
			-- Change the value of member `credentials` to `a_value`.
		require
			exists: exists
		do
			set_c_credentials (item, a_value)
		ensure
			credentials_set: a_value = credentials
		end

	certificate_check: POINTER
			-- Access member `certificate_check`
		require
			exists: exists
		do
			Result := c_certificate_check (item)
		ensure
			result_correct: Result = c_certificate_check (item)
		end

	set_certificate_check (a_value: POINTER) 
			-- Change the value of member `certificate_check` to `a_value`.
		require
			exists: exists
		do
			set_c_certificate_check (item, a_value)
		ensure
			certificate_check_set: a_value = certificate_check
		end

	transfer_progress: POINTER
			-- Access member `transfer_progress`
		require
			exists: exists
		do
			Result := c_transfer_progress (item)
		ensure
			result_correct: Result = c_transfer_progress (item)
		end

	set_transfer_progress (a_value: POINTER) 
			-- Change the value of member `transfer_progress` to `a_value`.
		require
			exists: exists
		do
			set_c_transfer_progress (item, a_value)
		ensure
			transfer_progress_set: a_value = transfer_progress
		end

	update_tips: POINTER
			-- Access member `update_tips`
		require
			exists: exists
		do
			Result := c_update_tips (item)
		ensure
			result_correct: Result = c_update_tips (item)
		end

	set_update_tips (a_value: POINTER) 
			-- Change the value of member `update_tips` to `a_value`.
		require
			exists: exists
		do
			set_c_update_tips (item, a_value)
		ensure
			update_tips_set: a_value = update_tips
		end

	pack_progress: POINTER
			-- Access member `pack_progress`
		require
			exists: exists
		do
			Result := c_pack_progress (item)
		ensure
			result_correct: Result = c_pack_progress (item)
		end

	set_pack_progress (a_value: POINTER) 
			-- Change the value of member `pack_progress` to `a_value`.
		require
			exists: exists
		do
			set_c_pack_progress (item, a_value)
		ensure
			pack_progress_set: a_value = pack_progress
		end

	push_transfer_progress: POINTER
			-- Access member `push_transfer_progress`
		require
			exists: exists
		do
			Result := c_push_transfer_progress (item)
		ensure
			result_correct: Result = c_push_transfer_progress (item)
		end

	set_push_transfer_progress (a_value: POINTER) 
			-- Change the value of member `push_transfer_progress` to `a_value`.
		require
			exists: exists
		do
			set_c_push_transfer_progress (item, a_value)
		ensure
			push_transfer_progress_set: a_value = push_transfer_progress
		end

	push_update_reference: POINTER
			-- Access member `push_update_reference`
		require
			exists: exists
		do
			Result := c_push_update_reference (item)
		ensure
			result_correct: Result = c_push_update_reference (item)
		end

	set_push_update_reference (a_value: POINTER) 
			-- Change the value of member `push_update_reference` to `a_value`.
		require
			exists: exists
		do
			set_c_push_update_reference (item, a_value)
		ensure
			push_update_reference_set: a_value = push_update_reference
		end

	push_negotiation: POINTER
			-- Access member `push_negotiation`
		require
			exists: exists
		do
			Result := c_push_negotiation (item)
		ensure
			result_correct: Result = c_push_negotiation (item)
		end

	set_push_negotiation (a_value: POINTER) 
			-- Change the value of member `push_negotiation` to `a_value`.
		require
			exists: exists
		do
			set_c_push_negotiation (item, a_value)
		ensure
			push_negotiation_set: a_value = push_negotiation
		end

	transport: POINTER
			-- Access member `transport`
		require
			exists: exists
		do
			Result := c_transport (item)
		ensure
			result_correct: Result = c_transport (item)
		end

	set_transport (a_value: POINTER) 
			-- Change the value of member `transport` to `a_value`.
		require
			exists: exists
		do
			set_c_transport (item, a_value)
		ensure
			transport_set: a_value = transport
		end

	payload: POINTER
			-- Access member `payload`
		require
			exists: exists
		do
			Result := c_payload (item)
		ensure
			result_correct: Result = c_payload (item)
		end

	set_payload (a_value: POINTER) 
			-- Change the value of member `payload` to `a_value`.
		require
			exists: exists
		do
			set_c_payload (item, a_value)
		ensure
			payload_set: a_value = payload
		end

feature {NONE} -- Implementation wrapper for struct struct git_remote_callbacks

	sizeof_external: INTEGER 
		external
			"C inline use <git2.h>"
		alias
			"sizeof(struct git_remote_callbacks)"
		end

	c_version (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_callbacks*)$an_item)->version
			]"
		end

	set_c_version (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_callbacks*)$an_item)->version =  (unsigned int)$a_value
			]"
		ensure
			version_set: a_value = c_version (an_item)
		end

	c_sideband_progress (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_callbacks*)$an_item)->sideband_progress
			]"
		end

	set_c_sideband_progress (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_callbacks*)$an_item)->sideband_progress =  (git_transport_message_cb)$a_value
			]"
		ensure
			sideband_progress_set: a_value = c_sideband_progress (an_item)
		end

	c_completion (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_callbacks*)$an_item)->completion
			]"
		end

	set_c_completion (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_callbacks*)$an_item)->completion =  (int (*) (git_remote_completion_type type, void *data))$a_value
			]"
		ensure
			completion_set: a_value = c_completion (an_item)
		end

	c_credentials (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_callbacks*)$an_item)->credentials
			]"
		end

	set_c_credentials (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_callbacks*)$an_item)->credentials =  (git_cred_acquire_cb)$a_value
			]"
		ensure
			credentials_set: a_value = c_credentials (an_item)
		end

	c_certificate_check (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_callbacks*)$an_item)->certificate_check
			]"
		end

	set_c_certificate_check (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_callbacks*)$an_item)->certificate_check =  (git_transport_certificate_check_cb)$a_value
			]"
		ensure
			certificate_check_set: a_value = c_certificate_check (an_item)
		end

	c_transfer_progress (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_callbacks*)$an_item)->transfer_progress
			]"
		end

	set_c_transfer_progress (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_callbacks*)$an_item)->transfer_progress =  (git_transfer_progress_cb)$a_value
			]"
		ensure
			transfer_progress_set: a_value = c_transfer_progress (an_item)
		end

	c_update_tips (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_callbacks*)$an_item)->update_tips
			]"
		end

	set_c_update_tips (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_callbacks*)$an_item)->update_tips =  (int (*) (char const *refname, git_oid const *a, git_oid const *b, void *data))$a_value
			]"
		ensure
			update_tips_set: a_value = c_update_tips (an_item)
		end

	c_pack_progress (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_callbacks*)$an_item)->pack_progress
			]"
		end

	set_c_pack_progress (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_callbacks*)$an_item)->pack_progress =  (git_packbuilder_progress)$a_value
			]"
		ensure
			pack_progress_set: a_value = c_pack_progress (an_item)
		end

	c_push_transfer_progress (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_callbacks*)$an_item)->push_transfer_progress
			]"
		end

	set_c_push_transfer_progress (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_callbacks*)$an_item)->push_transfer_progress =  (git_push_transfer_progress)$a_value
			]"
		ensure
			push_transfer_progress_set: a_value = c_push_transfer_progress (an_item)
		end

	c_push_update_reference (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_callbacks*)$an_item)->push_update_reference
			]"
		end

	set_c_push_update_reference (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_callbacks*)$an_item)->push_update_reference =  (git_push_update_reference_cb)$a_value
			]"
		ensure
			push_update_reference_set: a_value = c_push_update_reference (an_item)
		end

	c_push_negotiation (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_callbacks*)$an_item)->push_negotiation
			]"
		end

	set_c_push_negotiation (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_callbacks*)$an_item)->push_negotiation =  (git_push_negotiation)$a_value
			]"
		ensure
			push_negotiation_set: a_value = c_push_negotiation (an_item)
		end

	c_transport (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_callbacks*)$an_item)->transport
			]"
		end

	set_c_transport (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_callbacks*)$an_item)->transport =  (git_transport_cb)$a_value
			]"
		ensure
			transport_set: a_value = c_transport (an_item)
		end

	c_payload (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_callbacks*)$an_item)->payload
			]"
		end

	set_c_payload (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_callbacks*)$an_item)->payload =  (void*)$a_value
			]"
		ensure
			payload_set: a_value = c_payload (an_item)
		end

end
