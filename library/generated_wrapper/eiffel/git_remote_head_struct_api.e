note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class GIT_REMOTE_HEAD_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	a_local: INTEGER
			-- Access member `local`
		require
			exists: exists
		do
			Result := c_a_local (item)
		ensure
			result_correct: Result = c_a_local (item)
		end

	set_a_local (a_value: INTEGER) 
			-- Change the value of member `local` to `a_value`.
		require
			exists: exists
		do
			set_c_a_local (item, a_value)
		ensure
			a_local_set: a_value = a_local
		end

	oid: GIT_OID_STRUCT_API
			-- Access member `oid`
		require
			exists: exists
		do
			create Result.make_by_pointer ( c_oid(item) )
		ensure
			result_not_void: Result.item = c_oid (item) 
		end

	set_oid (a_value: GIT_OID_STRUCT_API) 
			-- Set member `oid`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_oid (item, a_value.item)
		ensure
			oid_set: oid.item = a_value.item
		end

	loid: GIT_OID_STRUCT_API
			-- Access member `loid`
		require
			exists: exists
		do
			create Result.make_by_pointer ( c_loid(item) )
		ensure
			result_not_void: Result.item = c_loid (item) 
		end

	set_loid (a_value: GIT_OID_STRUCT_API) 
			-- Set member `loid`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_loid (item, a_value.item)
		ensure
			loid_set: loid.item = a_value.item
		end

	name:  detachable STRING
			-- Access member `name`
		require
			exists: exists
		do
			if attached c_name (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_name (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_name (a_value: STRING) 
			-- Change the value of member `name` to `a_value`.
		require
			exists: exists
		do
			set_c_name (item, (create {C_STRING}.make (a_value)).item )
		end

	symref_target:  detachable STRING
			-- Access member `symref_target`
		require
			exists: exists
		do
			if attached c_symref_target (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_symref_target (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_symref_target (a_value: STRING) 
			-- Change the value of member `symref_target` to `a_value`.
		require
			exists: exists
		do
			set_c_symref_target (item, (create {C_STRING}.make (a_value)).item )
		end

feature {NONE} -- Implementation wrapper for struct struct git_remote_head

	sizeof_external: INTEGER 
		external
			"C inline use <git2.h>"
		alias
			"sizeof(struct git_remote_head)"
		end

	c_a_local (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_head*)$an_item)->local
			]"
		end

	set_c_a_local (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_head*)$an_item)->local =  (int)$a_value
			]"
		ensure
			a_local_set: a_value = c_a_local (an_item)
		end

	c_oid (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				&((struct git_remote_head*)$an_item)->oid
			]"
		end

	set_c_oid (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_head*)$an_item)->oid =  *(git_oid*)$a_value
			]"
		end

	c_loid (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				&((struct git_remote_head*)$an_item)->loid
			]"
		end

	set_c_loid (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_head*)$an_item)->loid =  *(git_oid*)$a_value
			]"
		end

	c_name (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_head*)$an_item)->name
			]"
		end

	set_c_name (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_head*)$an_item)->name =  (char*)$a_value
			]"
		ensure
			name_set: a_value = c_name (an_item)
		end

	c_symref_target (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_head*)$an_item)->symref_target
			]"
		end

	set_c_symref_target (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_remote_head*)$an_item)->symref_target =  (char*)$a_value
			]"
		ensure
			symref_target_set: a_value = c_symref_target (an_item)
		end

end
