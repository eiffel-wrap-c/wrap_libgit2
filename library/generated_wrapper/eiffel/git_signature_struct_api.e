note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class GIT_SIGNATURE_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	name:  detachable STRING
			-- Access member `name`
		require
			exists: exists
		do
			if attached c_name (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_name (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_name (a_value: STRING) 
			-- Change the value of member `name` to `a_value`.
		require
			exists: exists
		do
			set_c_name (item, (create {C_STRING}.make (a_value)).item )
		end

	email:  detachable STRING
			-- Access member `email`
		require
			exists: exists
		do
			if attached c_email (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_email (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_email (a_value: STRING) 
			-- Change the value of member `email` to `a_value`.
		require
			exists: exists
		do
			set_c_email (item, (create {C_STRING}.make (a_value)).item )
		end

	a_when: detachable GIT_TIME_STRUCT_API
			-- Access member `when`
		require
			exists: exists
		do
			if attached c_a_when (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_a_when (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_a_when (item) 
		end

	set_a_when (a_value: GIT_TIME_STRUCT_API) 
			-- Set member `when`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_a_when (item, a_value.item)
		ensure
			a_when_set: attached a_when as l_value implies l_value.item = a_value.item
		end

feature {NONE} -- Implementation wrapper for struct struct git_signature

	sizeof_external: INTEGER 
		external
			"C inline use <git2.h>"
		alias
			"sizeof(struct git_signature)"
		end

	c_name (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_signature*)$an_item)->name
			]"
		end

	set_c_name (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_signature*)$an_item)->name =  (char*)$a_value
			]"
		ensure
			name_set: a_value = c_name (an_item)
		end

	c_email (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_signature*)$an_item)->email
			]"
		end

	set_c_email (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_signature*)$an_item)->email =  (char*)$a_value
			]"
		ensure
			email_set: a_value = c_email (an_item)
		end

	c_a_when (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				&((struct git_signature*)$an_item)->when
			]"
		end

	set_c_a_when (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_signature*)$an_item)->when =  *(git_time*)$a_value
			]"
		end

end
