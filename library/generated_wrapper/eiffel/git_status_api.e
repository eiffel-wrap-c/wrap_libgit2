note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"
-- functions wrapper
class GIT_STATUS_API


feature -- Access

	git_status_options_init (opts: GIT_STATUS_OPTIONS_STRUCT_API; version: INTEGER): INTEGER 
		do
			Result := c_git_status_options_init (opts.item, version)
		end

	git_status_foreach (repo: GIT_REPOSITORY_STRUCT_API; callback: POINTER; payload: POINTER): INTEGER 
		do
			Result := c_git_status_foreach (repo.item, callback, payload)
		end

	git_status_foreach_ext (repo: GIT_REPOSITORY_STRUCT_API; opts: GIT_STATUS_OPTIONS_STRUCT_API; callback: POINTER; payload: POINTER): INTEGER 
		do
			Result := c_git_status_foreach_ext (repo.item, opts.item, callback, payload)
		end

	git_status_file (status_flags: POINTER; repo: GIT_REPOSITORY_STRUCT_API; path: STRING): INTEGER 
		local
			path_c_string: C_STRING
		do
			create path_c_string.make (path)
			Result := c_git_status_file (status_flags, repo.item, path_c_string.item)
		end

	git_status_list_new (a_out: GIT_STATUS_LIST_STRUCT_API; repo: GIT_REPOSITORY_STRUCT_API; opts: GIT_STATUS_OPTIONS_STRUCT_API): INTEGER 
		do
			Result := c_git_status_list_new (a_out.item, repo.item, opts.item)
		end

	git_status_list_entrycount (statuslist: GIT_STATUS_LIST_STRUCT_API): INTEGER 
		do
			Result := c_git_status_list_entrycount (statuslist.item)
		end

	git_status_byindex (statuslist: GIT_STATUS_LIST_STRUCT_API; idx: INTEGER): detachable GIT_STATUS_ENTRY_STRUCT_API 
		do
			if attached c_git_status_byindex (statuslist.item, idx) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer ( l_ptr )
			end

		end

	git_status_list_free (statuslist: GIT_STATUS_LIST_STRUCT_API) 
		do
			c_git_status_list_free (statuslist.item)
		end

	git_status_should_ignore (ignored: POINTER; repo: GIT_REPOSITORY_STRUCT_API; path: STRING): INTEGER 
		local
			path_c_string: C_STRING
		do
			create path_c_string.make (path)
			Result := c_git_status_should_ignore (ignored, repo.item, path_c_string.item)
		end

	git_status_init_options (opts: GIT_STATUS_OPTIONS_STRUCT_API; version: INTEGER): INTEGER 
		do
			Result := c_git_status_init_options (opts.item, version)
		end

feature -- Externals

	c_git_status_options_init (opts: POINTER; version: INTEGER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_status_options_init ((git_status_options*)$opts, (unsigned int)$version);
			]"
		end

	c_git_status_foreach (repo: POINTER; callback: POINTER; payload: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_status_foreach ((git_repository*)$repo, (git_status_cb)$callback, (void*)$payload);
			]"
		end

	c_git_status_foreach_ext (repo: POINTER; opts: POINTER; callback: POINTER; payload: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_status_foreach_ext ((git_repository*)$repo, (git_status_options const*)$opts, (git_status_cb)$callback, (void*)$payload);
			]"
		end

	c_git_status_file (status_flags: POINTER; repo: POINTER; path: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_status_file ((unsigned int*)$status_flags, (git_repository*)$repo, (char const*)$path);
			]"
		end

	c_git_status_list_new (a_out: POINTER; repo: POINTER; opts: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_status_list_new ((git_status_list**)$a_out, (git_repository*)$repo, (git_status_options const*)$opts);
			]"
		end

	c_git_status_list_entrycount (statuslist: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_status_list_entrycount ((git_status_list*)$statuslist);
			]"
		end

	c_git_status_byindex (statuslist: POINTER; idx: INTEGER): POINTER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_status_byindex ((git_status_list*)$statuslist, (size_t)$idx);
			]"
		end

	c_git_status_list_free (statuslist: POINTER)
		external
			"C inline use <git2.h>"
		alias
			"[
				git_status_list_free ((git_status_list*)$statuslist);
			]"
		end

	c_git_status_should_ignore (ignored: POINTER; repo: POINTER; path: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_status_should_ignore ((int*)$ignored, (git_repository*)$repo, (char const*)$path);
			]"
		end

	c_git_status_init_options (opts: POINTER; version: INTEGER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_status_init_options ((git_status_options*)$opts, (unsigned int)$version);
			]"
		end

feature -- Externals Address

end
