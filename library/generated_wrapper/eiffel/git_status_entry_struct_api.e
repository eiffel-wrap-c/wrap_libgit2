note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class GIT_STATUS_ENTRY_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	status: INTEGER
			-- Access member `status`
		require
			exists: exists
		do
			Result := c_status (item)
		ensure
			result_correct: Result = c_status (item)
		end

	set_status (a_value: INTEGER) 
			-- Change the value of member `status` to `a_value`.
		require
			exists: exists
		do
			set_c_status (item, a_value)
		ensure
			status_set: a_value = status
		end

	head_to_index: detachable GIT_DIFF_DELTA_STRUCT_API 
			-- Access member `head_to_index`
		require
			exists: exists
		do
			if attached c_head_to_index (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_head_to_index (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_head_to_index (item) 
		end

	set_head_to_index (a_value: GIT_DIFF_DELTA_STRUCT_API) 
			-- Set member `head_to_index`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_head_to_index (item, a_value.item)
		ensure
			head_to_index_set: attached head_to_index as l_value implies l_value.item = a_value.item
		end

	index_to_workdir: detachable GIT_DIFF_DELTA_STRUCT_API 
			-- Access member `index_to_workdir`
		require
			exists: exists
		do
			if attached c_index_to_workdir (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_index_to_workdir (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_index_to_workdir (item) 
		end

	set_index_to_workdir (a_value: GIT_DIFF_DELTA_STRUCT_API) 
			-- Set member `index_to_workdir`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_index_to_workdir (item, a_value.item)
		ensure
			index_to_workdir_set: attached index_to_workdir as l_value implies l_value.item = a_value.item
		end

feature {NONE} -- Implementation wrapper for struct git_status_entry

	sizeof_external: INTEGER 
		external
			"C inline use <git2.h>"
		alias
			"sizeof(git_status_entry)"
		end

	c_status (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_status_entry*)$an_item)->status
			]"
		end

	set_c_status (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_status_entry*)$an_item)->status =  (git_status_t)$a_value
			]"
		ensure
			status_set: a_value = c_status (an_item)
		end

	c_head_to_index (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_status_entry*)$an_item)->head_to_index
			]"
		end

	set_c_head_to_index (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_status_entry*)$an_item)->head_to_index =  (git_diff_delta*)$a_value
			]"
		ensure
			head_to_index_set: a_value = c_head_to_index (an_item)
		end

	c_index_to_workdir (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_status_entry*)$an_item)->index_to_workdir
			]"
		end

	set_c_index_to_workdir (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_status_entry*)$an_item)->index_to_workdir =  (git_diff_delta*)$a_value
			]"
		ensure
			index_to_workdir_set: a_value = c_index_to_workdir (an_item)
		end

end
