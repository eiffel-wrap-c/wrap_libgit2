note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class GIT_STATUS_OPTIONS_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	version: INTEGER
			-- Access member `version`
		require
			exists: exists
		do
			Result := c_version (item)
		ensure
			result_correct: Result = c_version (item)
		end

	set_version (a_value: INTEGER) 
			-- Change the value of member `version` to `a_value`.
		require
			exists: exists
		do
			set_c_version (item, a_value)
		ensure
			version_set: a_value = version
		end

	show: INTEGER
			-- Access member `show`
		require
			exists: exists
		do
			Result := c_show (item)
		ensure
			result_correct: Result = c_show (item)
		end

	set_show (a_value: INTEGER) 
			-- Change the value of member `show` to `a_value`.
		require
			exists: exists
		do
			set_c_show (item, a_value)
		ensure
			show_set: a_value = show
		end

	flags: INTEGER
			-- Access member `flags`
		require
			exists: exists
		do
			Result := c_flags (item)
		ensure
			result_correct: Result = c_flags (item)
		end

	set_flags (a_value: INTEGER) 
			-- Change the value of member `flags` to `a_value`.
		require
			exists: exists
		do
			set_c_flags (item, a_value)
		ensure
			flags_set: a_value = flags
		end

	pathspec: GIT_STRARRAY_STRUCT_API
			-- Access member `pathspec`
		require
			exists: exists
		do
			create Result.make_by_pointer ( c_pathspec(item) )
		ensure
			result_not_void: Result.item = c_pathspec (item) 
		end

	set_pathspec (a_value: GIT_STRARRAY_STRUCT_API) 
			-- Set member `pathspec`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_pathspec (item, a_value.item)
		ensure
			pathspec_set: pathspec.item = a_value.item
		end

	baseline: detachable GIT_TREE_STRUCT_API 
			-- Access member `baseline`
		require
			exists: exists
		do
			if attached c_baseline (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_baseline (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_baseline (item) 
		end

	set_baseline (a_value: GIT_TREE_STRUCT_API) 
			-- Set member `baseline`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_baseline (item, a_value.item)
		ensure
			baseline_set: attached baseline as l_value implies l_value.item = a_value.item
		end

feature {NONE} -- Implementation wrapper for struct git_status_options

	sizeof_external: INTEGER 
		external
			"C inline use <git2.h>"
		alias
			"sizeof(git_status_options)"
		end

	c_version (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_status_options*)$an_item)->version
			]"
		end

	set_c_version (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_status_options*)$an_item)->version =  (unsigned int)$a_value
			]"
		ensure
			version_set: a_value = c_version (an_item)
		end

	c_show (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_status_options*)$an_item)->show
			]"
		end

	set_c_show (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_status_options*)$an_item)->show =  (git_status_show_t)$a_value
			]"
		ensure
			show_set: a_value = c_show (an_item)
		end

	c_flags (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_status_options*)$an_item)->flags
			]"
		end

	set_c_flags (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_status_options*)$an_item)->flags =  (unsigned int)$a_value
			]"
		ensure
			flags_set: a_value = c_flags (an_item)
		end

	c_pathspec (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				&((git_status_options*)$an_item)->pathspec
			]"
		end

	set_c_pathspec (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_status_options*)$an_item)->pathspec =  *(git_strarray*)$a_value
			]"
		end

	c_baseline (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_status_options*)$an_item)->baseline
			]"
		end

	set_c_baseline (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((git_status_options*)$an_item)->baseline =  (git_tree*)$a_value
			]"
		ensure
			baseline_set: a_value = c_baseline (an_item)
		end

end
