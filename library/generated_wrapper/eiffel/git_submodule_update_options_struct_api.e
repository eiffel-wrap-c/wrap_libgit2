note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class GIT_SUBMODULE_UPDATE_OPTIONS_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	version: INTEGER
			-- Access member `version`
		require
			exists: exists
		do
			Result := c_version (item)
		ensure
			result_correct: Result = c_version (item)
		end

	set_version (a_value: INTEGER) 
			-- Change the value of member `version` to `a_value`.
		require
			exists: exists
		do
			set_c_version (item, a_value)
		ensure
			version_set: a_value = version
		end

	checkout_opts: detachable GIT_CHECKOUT_OPTIONS_STRUCT_API
			-- Access member `checkout_opts`
		require
			exists: exists
		do
			if attached c_checkout_opts (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_checkout_opts (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_checkout_opts (item) 
		end

	set_checkout_opts (a_value: GIT_CHECKOUT_OPTIONS_STRUCT_API) 
			-- Set member `checkout_opts`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_checkout_opts (item, a_value.item)
		ensure
			checkout_opts_set: attached checkout_opts as l_value implies l_value.item = a_value.item
		end

	fetch_opts: detachable GIT_FETCH_OPTIONS_STRUCT_API
			-- Access member `fetch_opts`
		require
			exists: exists
		do
			if attached c_fetch_opts (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_fetch_opts (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_fetch_opts (item) 
		end

	set_fetch_opts (a_value: GIT_FETCH_OPTIONS_STRUCT_API) 
			-- Set member `fetch_opts`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_fetch_opts (item, a_value.item)
		ensure
			fetch_opts_set: attached fetch_opts as l_value implies l_value.item = a_value.item
		end

	allow_fetch: INTEGER
			-- Access member `allow_fetch`
		require
			exists: exists
		do
			Result := c_allow_fetch (item)
		ensure
			result_correct: Result = c_allow_fetch (item)
		end

	set_allow_fetch (a_value: INTEGER) 
			-- Change the value of member `allow_fetch` to `a_value`.
		require
			exists: exists
		do
			set_c_allow_fetch (item, a_value)
		ensure
			allow_fetch_set: a_value = allow_fetch
		end

feature {NONE} -- Implementation wrapper for struct struct git_submodule_update_options

	sizeof_external: INTEGER 
		external
			"C inline use <git2.h>"
		alias
			"sizeof(struct git_submodule_update_options)"
		end

	c_version (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_submodule_update_options*)$an_item)->version
			]"
		end

	set_c_version (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_submodule_update_options*)$an_item)->version =  (unsigned int)$a_value
			]"
		ensure
			version_set: a_value = c_version (an_item)
		end

	c_checkout_opts (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				&((struct git_submodule_update_options*)$an_item)->checkout_opts
			]"
		end

	set_c_checkout_opts (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_submodule_update_options*)$an_item)->checkout_opts =  *(git_checkout_options*)$a_value
			]"
		end

	c_fetch_opts (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				&((struct git_submodule_update_options*)$an_item)->fetch_opts
			]"
		end

	set_c_fetch_opts (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_submodule_update_options*)$an_item)->fetch_opts =  *(git_fetch_options*)$a_value
			]"
		end

	c_allow_fetch (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_submodule_update_options*)$an_item)->allow_fetch
			]"
		end

	set_c_allow_fetch (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_submodule_update_options*)$an_item)->allow_fetch =  (int)$a_value
			]"
		ensure
			allow_fetch_set: a_value = c_allow_fetch (an_item)
		end

end
