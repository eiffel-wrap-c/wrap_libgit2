note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class GIT_TIME_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	time: INTEGER
			-- Access member `time`
		require
			exists: exists
		do
			Result := c_time (item)
		ensure
			result_correct: Result = c_time (item)
		end

	set_time (a_value: INTEGER) 
			-- Change the value of member `time` to `a_value`.
		require
			exists: exists
		do
			set_c_time (item, a_value)
		ensure
			time_set: a_value = time
		end

	offset: INTEGER
			-- Access member `offset`
		require
			exists: exists
		do
			Result := c_offset (item)
		ensure
			result_correct: Result = c_offset (item)
		end

	set_offset (a_value: INTEGER) 
			-- Change the value of member `offset` to `a_value`.
		require
			exists: exists
		do
			set_c_offset (item, a_value)
		ensure
			offset_set: a_value = offset
		end

	sign: CHARACTER
			-- Access member `sign`
		require
			exists: exists
		do
			Result := c_sign (item)
		ensure
			result_correct: Result = c_sign (item)
		end

	set_sign (a_value: CHARACTER) 
			-- Change the value of member `sign` to `a_value`.
		require
			exists: exists
		do
			set_c_sign (item, a_value)
		ensure
			sign_set: a_value = sign
		end

feature {NONE} -- Implementation wrapper for struct struct git_time

	sizeof_external: INTEGER 
		external
			"C inline use <git2.h>"
		alias
			"sizeof(struct git_time)"
		end

	c_time (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_time*)$an_item)->time
			]"
		end

	set_c_time (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_time*)$an_item)->time =  (git_time_t)$a_value
			]"
		ensure
			time_set: a_value = c_time (an_item)
		end

	c_offset (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_time*)$an_item)->offset
			]"
		end

	set_c_offset (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_time*)$an_item)->offset =  (int)$a_value
			]"
		ensure
			offset_set: a_value = c_offset (an_item)
		end

	c_sign (an_item: POINTER): CHARACTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_time*)$an_item)->sign
			]"
		end

	set_c_sign (an_item: POINTER; a_value: CHARACTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_time*)$an_item)->sign =  (char)$a_value
			]"
		ensure
			sign_set: a_value = c_sign (an_item)
		end

end
