note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class GIT_WRITESTREAM_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	write: POINTER
			-- Access member `write`
		require
			exists: exists
		do
			Result := c_write (item)
		ensure
			result_correct: Result = c_write (item)
		end

	set_write (a_value: POINTER) 
			-- Change the value of member `write` to `a_value`.
		require
			exists: exists
		do
			set_c_write (item, a_value)
		ensure
			write_set: a_value = write
		end

	close: POINTER
			-- Access member `close`
		require
			exists: exists
		do
			Result := c_close (item)
		ensure
			result_correct: Result = c_close (item)
		end

	set_close (a_value: POINTER) 
			-- Change the value of member `close` to `a_value`.
		require
			exists: exists
		do
			set_c_close (item, a_value)
		ensure
			close_set: a_value = close
		end

	free: POINTER
			-- Access member `free`
		require
			exists: exists
		do
			Result := c_free (item)
		ensure
			result_correct: Result = c_free (item)
		end

	set_free (a_value: POINTER) 
			-- Change the value of member `free` to `a_value`.
		require
			exists: exists
		do
			set_c_free (item, a_value)
		ensure
			free_set: a_value = free
		end

feature {NONE} -- Implementation wrapper for struct struct git_writestream

	sizeof_external: INTEGER 
		external
			"C inline use <git2.h>"
		alias
			"sizeof(struct git_writestream)"
		end

	c_write (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_writestream*)$an_item)->write
			]"
		end

	set_c_write (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_writestream*)$an_item)->write =  (int (*) (git_writestream *stream, char const *buffer, size_t len))$a_value
			]"
		ensure
			write_set: a_value = c_write (an_item)
		end

	c_close (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_writestream*)$an_item)->close
			]"
		end

	set_c_close (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_writestream*)$an_item)->close =  (int (*) (git_writestream *stream))$a_value
			]"
		ensure
			close_set: a_value = c_close (an_item)
		end

	c_free (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_writestream*)$an_item)->free
			]"
		end

	set_c_free (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <git2.h>"
		alias
			"[
				((struct git_writestream*)$an_item)->free =  (void (*) (git_writestream *stream))$a_value
			]"
		ensure
			free_set: a_value = c_free (an_item)
		end

end
