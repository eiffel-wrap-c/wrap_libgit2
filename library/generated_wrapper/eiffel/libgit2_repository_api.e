note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"
-- functions wrapper
class LIBGIT2_REPOSITORY_API


feature -- Access

	git_repository_open (a_out: GIT_REPOSITORY_STRUCT_API; path: STRING_8): INTEGER 
		local
			path_c_string: C_STRING
		do
			create path_c_string.make (path)
			Result := c_git_repository_open (a_out.item, path_c_string.item)
		ensure
			instance_free: class
		end

	git_repository_open_from_worktree (a_out: GIT_REPOSITORY_STRUCT_API; wt: GIT_WORKTREE_STRUCT_API): INTEGER 
		do
			Result := c_git_repository_open_from_worktree (a_out.item, wt.item)
		ensure
			instance_free: class
		end

	git_repository_wrap_odb (a_out: GIT_REPOSITORY_STRUCT_API; odb: GIT_ODB_STRUCT_API): INTEGER 
		do
			Result := c_git_repository_wrap_odb (a_out.item, odb.item)
		ensure
			instance_free: class
		end

	git_repository_discover (a_out: GIT_BUF_STRUCT_API; start_path: STRING_8; across_fs: INTEGER; ceiling_dirs: STRING_8): INTEGER 
		local
			start_path_c_string: C_STRING
			ceiling_dirs_c_string: C_STRING
		do
			create start_path_c_string.make (start_path)
			create ceiling_dirs_c_string.make (ceiling_dirs)
			Result := c_git_repository_discover (a_out.item, start_path_c_string.item, across_fs, ceiling_dirs_c_string.item)
		ensure
			instance_free: class
		end

	git_repository_open_ext (a_out: GIT_REPOSITORY_STRUCT_API; path: STRING_8; flags: INTEGER; ceiling_dirs: STRING_8): INTEGER 
		local
			path_c_string: C_STRING
			ceiling_dirs_c_string: C_STRING
		do
			create path_c_string.make (path)
			create ceiling_dirs_c_string.make (ceiling_dirs)
			Result := c_git_repository_open_ext (a_out.item, path_c_string.item, flags, ceiling_dirs_c_string.item)
		ensure
			instance_free: class
		end

	git_repository_open_bare (a_out: GIT_REPOSITORY_STRUCT_API; bare_path: STRING_8): INTEGER 
		local
			bare_path_c_string: C_STRING
		do
			create bare_path_c_string.make (bare_path)
			Result := c_git_repository_open_bare (a_out.item, bare_path_c_string.item)
		ensure
			instance_free: class
		end

	git_repository_free (repo: GIT_REPOSITORY_STRUCT_API) 
		do
			c_git_repository_free (repo.item)
		ensure
			instance_free: class
		end

	git_repository_init (a_out: GIT_REPOSITORY_STRUCT_API; path: STRING_8; is_bare: INTEGER): INTEGER 
		local
			path_c_string: C_STRING
		do
			create path_c_string.make (path)
			Result := c_git_repository_init (a_out.item, path_c_string.item, is_bare)
		ensure
			instance_free: class
		end

	git_repository_init_options_init (opts: GIT_REPOSITORY_INIT_OPTIONS_STRUCT_API; version: INTEGER): INTEGER 
		do
			Result := c_git_repository_init_options_init (opts.item, version)
		ensure
			instance_free: class
		end

	git_repository_init_ext (a_out: GIT_REPOSITORY_STRUCT_API; repo_path: STRING_8; opts: GIT_REPOSITORY_INIT_OPTIONS_STRUCT_API): INTEGER 
		local
			repo_path_c_string: C_STRING
		do
			create repo_path_c_string.make (repo_path)
			Result := c_git_repository_init_ext (a_out.item, repo_path_c_string.item, opts.item)
		ensure
			instance_free: class
		end

	git_repository_head (a_out: GIT_REFERENCE_STRUCT_API; repo: GIT_REPOSITORY_STRUCT_API): INTEGER 
		do
			Result := c_git_repository_head (a_out.item, repo.item)
		ensure
			instance_free: class
		end

	git_repository_head_for_worktree (a_out: GIT_REFERENCE_STRUCT_API; repo: GIT_REPOSITORY_STRUCT_API; name: STRING_8): INTEGER 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			Result := c_git_repository_head_for_worktree (a_out.item, repo.item, name_c_string.item)
		ensure
			instance_free: class
		end

	git_repository_head_detached (repo: GIT_REPOSITORY_STRUCT_API): INTEGER 
		do
			Result := c_git_repository_head_detached (repo.item)
		ensure
			instance_free: class
		end

	git_repository_head_detached_for_worktree (repo: GIT_REPOSITORY_STRUCT_API; name: STRING_8): INTEGER 
		local
			name_c_string: C_STRING
		do
			create name_c_string.make (name)
			Result := c_git_repository_head_detached_for_worktree (repo.item, name_c_string.item)
		ensure
			instance_free: class
		end

	git_repository_head_unborn (repo: GIT_REPOSITORY_STRUCT_API): INTEGER 
		do
			Result := c_git_repository_head_unborn (repo.item)
		ensure
			instance_free: class
		end

	git_repository_is_empty (repo: GIT_REPOSITORY_STRUCT_API): INTEGER 
		do
			Result := c_git_repository_is_empty (repo.item)
		ensure
			instance_free: class
		end

	git_repository_item_path (a_out: GIT_BUF_STRUCT_API; repo: GIT_REPOSITORY_STRUCT_API; item: INTEGER): INTEGER 
		do
			Result := c_git_repository_item_path (a_out.item, repo.item, item)
		ensure
			instance_free: class
		end

	git_repository_path (repo: GIT_REPOSITORY_STRUCT_API): POINTER 
		do
			Result := c_git_repository_path (repo.item)
		ensure
			instance_free: class
		end

	git_repository_workdir (repo: GIT_REPOSITORY_STRUCT_API): POINTER 
		do
			Result := c_git_repository_workdir (repo.item)
		ensure
			instance_free: class
		end

	git_repository_commondir (repo: GIT_REPOSITORY_STRUCT_API): POINTER 
		do
			Result := c_git_repository_commondir (repo.item)
		ensure
			instance_free: class
		end

	git_repository_set_workdir (repo: GIT_REPOSITORY_STRUCT_API; workdir: STRING_8; update_gitlink: INTEGER): INTEGER 
		local
			workdir_c_string: C_STRING
		do
			create workdir_c_string.make (workdir)
			Result := c_git_repository_set_workdir (repo.item, workdir_c_string.item, update_gitlink)
		ensure
			instance_free: class
		end

	git_repository_is_bare (repo: GIT_REPOSITORY_STRUCT_API): INTEGER 
		do
			Result := c_git_repository_is_bare (repo.item)
		ensure
			instance_free: class
		end

	git_repository_is_worktree (repo: GIT_REPOSITORY_STRUCT_API): INTEGER 
		do
			Result := c_git_repository_is_worktree (repo.item)
		ensure
			instance_free: class
		end

	git_repository_config (a_out: GIT_CONFIG_STRUCT_API; repo: GIT_REPOSITORY_STRUCT_API): INTEGER 
		do
			Result := c_git_repository_config (a_out.item, repo.item)
		ensure
			instance_free: class
		end

	git_repository_config_snapshot (a_out: GIT_CONFIG_STRUCT_API; repo: GIT_REPOSITORY_STRUCT_API): INTEGER 
		do
			Result := c_git_repository_config_snapshot (a_out.item, repo.item)
		ensure
			instance_free: class
		end

	git_repository_odb (a_out: GIT_ODB_STRUCT_API; repo: GIT_REPOSITORY_STRUCT_API): INTEGER 
		do
			Result := c_git_repository_odb (a_out.item, repo.item)
		ensure
			instance_free: class
		end

	git_repository_refdb (a_out: GIT_REFDB_STRUCT_API; repo: GIT_REPOSITORY_STRUCT_API): INTEGER 
		do
			Result := c_git_repository_refdb (a_out.item, repo.item)
		ensure
			instance_free: class
		end

	git_repository_index (a_out: GIT_INDEX_STRUCT_API; repo: GIT_REPOSITORY_STRUCT_API): INTEGER 
		do
			Result := c_git_repository_index (a_out.item, repo.item)
		ensure
			instance_free: class
		end

	git_repository_message (a_out: GIT_BUF_STRUCT_API; repo: GIT_REPOSITORY_STRUCT_API): INTEGER 
		do
			Result := c_git_repository_message (a_out.item, repo.item)
		ensure
			instance_free: class
		end

	git_repository_message_remove (repo: GIT_REPOSITORY_STRUCT_API): INTEGER 
		do
			Result := c_git_repository_message_remove (repo.item)
		ensure
			instance_free: class
		end

	git_repository_state_cleanup (repo: GIT_REPOSITORY_STRUCT_API): INTEGER 
		do
			Result := c_git_repository_state_cleanup (repo.item)
		ensure
			instance_free: class
		end

	git_repository_fetchhead_foreach (repo: GIT_REPOSITORY_STRUCT_API; callback: POINTER; payload: POINTER): INTEGER 
		do
			Result := c_git_repository_fetchhead_foreach (repo.item, callback, payload)
		ensure
			instance_free: class
		end

	git_repository_mergehead_foreach (repo: GIT_REPOSITORY_STRUCT_API; callback: POINTER; payload: POINTER): INTEGER 
		do
			Result := c_git_repository_mergehead_foreach (repo.item, callback, payload)
		ensure
			instance_free: class
		end

	git_repository_hashfile (a_out: GIT_OID_STRUCT_API; repo: GIT_REPOSITORY_STRUCT_API; path: STRING_8; type: INTEGER; as_path: STRING_8): INTEGER 
		local
			path_c_string: C_STRING
			as_path_c_string: C_STRING
		do
			create path_c_string.make (path)
			create as_path_c_string.make (as_path)
			Result := c_git_repository_hashfile (a_out.item, repo.item, path_c_string.item, type, as_path_c_string.item)
		ensure
			instance_free: class
		end

	git_repository_set_head (repo: GIT_REPOSITORY_STRUCT_API; refname: STRING_8): INTEGER 
		local
			refname_c_string: C_STRING
		do
			create refname_c_string.make (refname)
			Result := c_git_repository_set_head (repo.item, refname_c_string.item)
		ensure
			instance_free: class
		end

	git_repository_set_head_detached (repo: GIT_REPOSITORY_STRUCT_API; commitish: GIT_OID_STRUCT_API): INTEGER 
		do
			Result := c_git_repository_set_head_detached (repo.item, commitish.item)
		ensure
			instance_free: class
		end

	git_repository_set_head_detached_from_annotated (repo: GIT_REPOSITORY_STRUCT_API; commitish: GIT_ANNOTATED_COMMIT_STRUCT_API): INTEGER 
		do
			Result := c_git_repository_set_head_detached_from_annotated (repo.item, commitish.item)
		ensure
			instance_free: class
		end

	git_repository_detach_head (repo: GIT_REPOSITORY_STRUCT_API): INTEGER 
		do
			Result := c_git_repository_detach_head (repo.item)
		ensure
			instance_free: class
		end

	git_repository_state (repo: GIT_REPOSITORY_STRUCT_API): INTEGER 
		do
			Result := c_git_repository_state (repo.item)
		ensure
			instance_free: class
		end

	git_repository_set_namespace (repo: GIT_REPOSITORY_STRUCT_API; nmspace: STRING_8): INTEGER 
		local
			nmspace_c_string: C_STRING
		do
			create nmspace_c_string.make (nmspace)
			Result := c_git_repository_set_namespace (repo.item, nmspace_c_string.item)
		ensure
			instance_free: class
		end

	git_repository_get_namespace (repo: GIT_REPOSITORY_STRUCT_API): POINTER 
		do
			Result := c_git_repository_get_namespace (repo.item)
		ensure
			instance_free: class
		end

	git_repository_is_shallow (repo: GIT_REPOSITORY_STRUCT_API): INTEGER 
		do
			Result := c_git_repository_is_shallow (repo.item)
		ensure
			instance_free: class
		end

	git_repository_ident (name: POINTER; email: POINTER; repo: GIT_REPOSITORY_STRUCT_API): INTEGER 
		do
			Result := c_git_repository_ident (name, email, repo.item)
		ensure
			instance_free: class
		end

	git_repository_set_ident (repo: GIT_REPOSITORY_STRUCT_API; name: STRING_8; email: STRING_8): INTEGER 
		local
			name_c_string: C_STRING
			email_c_string: C_STRING
		do
			create name_c_string.make (name)
			create email_c_string.make (email)
			Result := c_git_repository_set_ident (repo.item, name_c_string.item, email_c_string.item)
		ensure
			instance_free: class
		end

	git_repository_init_init_options (opts: GIT_REPOSITORY_INIT_OPTIONS_STRUCT_API; version: INTEGER): INTEGER 
		do
			Result := c_git_repository_init_init_options (opts.item, version)
		ensure
			instance_free: class
		end

feature -- Externals

	c_git_repository_open (a_out: POINTER; path: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_open ((git_repository**)$a_out, (char const*)$path);
			]"
		end

	c_git_repository_open_from_worktree (a_out: POINTER; wt: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_open_from_worktree ((git_repository**)$a_out, (git_worktree*)$wt);
			]"
		end

	c_git_repository_wrap_odb (a_out: POINTER; odb: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_wrap_odb ((git_repository**)$a_out, (git_odb*)$odb);
			]"
		end

	c_git_repository_discover (a_out: POINTER; start_path: POINTER; across_fs: INTEGER; ceiling_dirs: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_discover ((git_buf*)$a_out, (char const*)$start_path, (int)$across_fs, (char const*)$ceiling_dirs);
			]"
		end

	c_git_repository_open_ext (a_out: POINTER; path: POINTER; flags: INTEGER; ceiling_dirs: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_open_ext ((git_repository**)$a_out, (char const*)$path, (unsigned int)$flags, (char const*)$ceiling_dirs);
			]"
		end

	c_git_repository_open_bare (a_out: POINTER; bare_path: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_open_bare ((git_repository**)$a_out, (char const*)$bare_path);
			]"
		end

	c_git_repository_free (repo: POINTER)
		external
			"C inline use <git2.h>"
		alias
			"[
				git_repository_free ((git_repository*)$repo);
			]"
		end

	c_git_repository_init (a_out: POINTER; path: POINTER; is_bare: INTEGER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_init ((git_repository**)$a_out, (char const*)$path, (unsigned)$is_bare);
			]"
		end

	c_git_repository_init_options_init (opts: POINTER; version: INTEGER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_init_options_init ((git_repository_init_options*)$opts, (unsigned int)$version);
			]"
		end

	c_git_repository_init_ext (a_out: POINTER; repo_path: POINTER; opts: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_init_ext ((git_repository**)$a_out, (char const*)$repo_path, (git_repository_init_options*)$opts);
			]"
		end

	c_git_repository_head (a_out: POINTER; repo: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_head ((git_reference**)$a_out, (git_repository*)$repo);
			]"
		end

	c_git_repository_head_for_worktree (a_out: POINTER; repo: POINTER; name: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_head_for_worktree ((git_reference**)$a_out, (git_repository*)$repo, (char const*)$name);
			]"
		end

	c_git_repository_head_detached (repo: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_head_detached ((git_repository*)$repo);
			]"
		end

	c_git_repository_head_detached_for_worktree (repo: POINTER; name: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_head_detached_for_worktree ((git_repository*)$repo, (char const*)$name);
			]"
		end

	c_git_repository_head_unborn (repo: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_head_unborn ((git_repository*)$repo);
			]"
		end

	c_git_repository_is_empty (repo: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_is_empty ((git_repository*)$repo);
			]"
		end

	c_git_repository_item_path (a_out: POINTER; repo: POINTER; item: INTEGER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_item_path ((git_buf*)$a_out, (git_repository const*)$repo, (git_repository_item_t)$item);
			]"
		end

	c_git_repository_path (repo: POINTER): POINTER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_path ((git_repository const*)$repo);
			]"
		end

	c_git_repository_workdir (repo: POINTER): POINTER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_workdir ((git_repository const*)$repo);
			]"
		end

	c_git_repository_commondir (repo: POINTER): POINTER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_commondir ((git_repository const*)$repo);
			]"
		end

	c_git_repository_set_workdir (repo: POINTER; workdir: POINTER; update_gitlink: INTEGER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_set_workdir ((git_repository*)$repo, (char const*)$workdir, (int)$update_gitlink);
			]"
		end

	c_git_repository_is_bare (repo: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_is_bare ((git_repository const*)$repo);
			]"
		end

	c_git_repository_is_worktree (repo: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_is_worktree ((git_repository const*)$repo);
			]"
		end

	c_git_repository_config (a_out: POINTER; repo: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_config ((git_config**)$a_out, (git_repository*)$repo);
			]"
		end

	c_git_repository_config_snapshot (a_out: POINTER; repo: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_config_snapshot ((git_config**)$a_out, (git_repository*)$repo);
			]"
		end

	c_git_repository_odb (a_out: POINTER; repo: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_odb ((git_odb**)$a_out, (git_repository*)$repo);
			]"
		end

	c_git_repository_refdb (a_out: POINTER; repo: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_refdb ((git_refdb**)$a_out, (git_repository*)$repo);
			]"
		end

	c_git_repository_index (a_out: POINTER; repo: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_index ((git_index**)$a_out, (git_repository*)$repo);
			]"
		end

	c_git_repository_message (a_out: POINTER; repo: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_message ((git_buf*)$a_out, (git_repository*)$repo);
			]"
		end

	c_git_repository_message_remove (repo: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_message_remove ((git_repository*)$repo);
			]"
		end

	c_git_repository_state_cleanup (repo: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_state_cleanup ((git_repository*)$repo);
			]"
		end

	c_git_repository_fetchhead_foreach (repo: POINTER; callback: POINTER; payload: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_fetchhead_foreach ((git_repository*)$repo, (git_repository_fetchhead_foreach_cb)$callback, (void*)$payload);
			]"
		end

	c_git_repository_mergehead_foreach (repo: POINTER; callback: POINTER; payload: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_mergehead_foreach ((git_repository*)$repo, (git_repository_mergehead_foreach_cb)$callback, (void*)$payload);
			]"
		end

	c_git_repository_hashfile (a_out: POINTER; repo: POINTER; path: POINTER; type: INTEGER; as_path: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_hashfile ((git_oid*)$a_out, (git_repository*)$repo, (char const*)$path, (git_object_t)$type, (char const*)$as_path);
			]"
		end

	c_git_repository_set_head (repo: POINTER; refname: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_set_head ((git_repository*)$repo, (char const*)$refname);
			]"
		end

	c_git_repository_set_head_detached (repo: POINTER; commitish: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_set_head_detached ((git_repository*)$repo, (git_oid const*)$commitish);
			]"
		end

	c_git_repository_set_head_detached_from_annotated (repo: POINTER; commitish: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_set_head_detached_from_annotated ((git_repository*)$repo, (git_annotated_commit const*)$commitish);
			]"
		end

	c_git_repository_detach_head (repo: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_detach_head ((git_repository*)$repo);
			]"
		end

	c_git_repository_state (repo: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_state ((git_repository*)$repo);
			]"
		end

	c_git_repository_set_namespace (repo: POINTER; nmspace: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_set_namespace ((git_repository*)$repo, (char const*)$nmspace);
			]"
		end

	c_git_repository_get_namespace (repo: POINTER): POINTER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_get_namespace ((git_repository*)$repo);
			]"
		end

	c_git_repository_is_shallow (repo: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_is_shallow ((git_repository*)$repo);
			]"
		end

	c_git_repository_ident (name: POINTER; email: POINTER; repo: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_ident ((char const**)$name, (char const**)$email, (git_repository const*)$repo);
			]"
		end

	c_git_repository_set_ident (repo: POINTER; name: POINTER; email: POINTER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_set_ident ((git_repository*)$repo, (char const*)$name, (char const*)$email);
			]"
		end

	c_git_repository_init_init_options (opts: POINTER; version: INTEGER): INTEGER
		external
			"C inline use <git2.h>"
		alias
			"[
				return git_repository_init_init_options ((git_repository_init_options*)$opts, (unsigned int)$version);
			]"
		end

feature -- Externals Address

end
